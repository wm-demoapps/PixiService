/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * EngineerAppointment generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`engineer_appointment`")
public class EngineerAppointment implements Serializable {

    private Integer id;
    private Integer engineerId;
    private Date date;
    private Integer timeSlotId;
    private TimeSlot timeSlot;
    private Engineer engineer;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`engineer_id`", nullable = true, scale = 0, precision = 10)
    public Integer getEngineerId() {
        return this.engineerId;
    }

    public void setEngineerId(Integer engineerId) {
        this.engineerId = engineerId;
    }

    @Column(name = "`date`", nullable = true)
    public Date getDate() {
        return this.date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

    @Column(name = "`time_slot_id`", nullable = true, scale = 0, precision = 10)
    public Integer getTimeSlotId() {
        return this.timeSlotId;
    }

    public void setTimeSlotId(Integer timeSlotId) {
        this.timeSlotId = timeSlotId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`time_slot_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_engineer_appointment_5Dl97`"))
    @Fetch(FetchMode.JOIN)
    public TimeSlot getTimeSlot() {
        return this.timeSlot;
    }

    public void setTimeSlot(TimeSlot timeSlot) {
        if(timeSlot != null) {
            this.timeSlotId = timeSlot.getId();
        }

        this.timeSlot = timeSlot;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`engineer_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_engineer_appointment_rBLT9`"))
    @Fetch(FetchMode.JOIN)
    public Engineer getEngineer() {
        return this.engineer;
    }

    public void setEngineer(Engineer engineer) {
        if(engineer != null) {
            this.engineerId = engineer.getId();
        }

        this.engineer = engineer;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof EngineerAppointment)) return false;
        final EngineerAppointment engineerAppointment = (EngineerAppointment) o;
        return Objects.equals(getId(), engineerAppointment.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}
