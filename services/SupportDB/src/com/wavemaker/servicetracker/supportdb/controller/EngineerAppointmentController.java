/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.servicetracker.supportdb.EngineerAppointment;
import com.wavemaker.servicetracker.supportdb.Rma;
import com.wavemaker.servicetracker.supportdb.service.EngineerAppointmentService;


/**
 * Controller object for domain model class EngineerAppointment.
 * @see EngineerAppointment
 */
@RestController("SupportDB.EngineerAppointmentController")
@Api(value = "EngineerAppointmentController", description = "Exposes APIs to work with EngineerAppointment resource.")
@RequestMapping("/SupportDB/EngineerAppointment")
public class EngineerAppointmentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EngineerAppointmentController.class);

    @Autowired
	@Qualifier("SupportDB.EngineerAppointmentService")
	private EngineerAppointmentService engineerAppointmentService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new EngineerAppointment instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EngineerAppointment createEngineerAppointment(@RequestBody EngineerAppointment engineerAppointment) {
		LOGGER.debug("Create EngineerAppointment with information: {}" , engineerAppointment);

		engineerAppointment = engineerAppointmentService.create(engineerAppointment);
		LOGGER.debug("Created EngineerAppointment with information: {}" , engineerAppointment);

	    return engineerAppointment;
	}

    @ApiOperation(value = "Returns the EngineerAppointment instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EngineerAppointment getEngineerAppointment(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting EngineerAppointment with id: {}" , id);

        EngineerAppointment foundEngineerAppointment = engineerAppointmentService.getById(id);
        LOGGER.debug("EngineerAppointment details with id: {}" , foundEngineerAppointment);

        return foundEngineerAppointment;
    }

    @ApiOperation(value = "Updates the EngineerAppointment instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EngineerAppointment editEngineerAppointment(@PathVariable("id") Integer id, @RequestBody EngineerAppointment engineerAppointment) {
        LOGGER.debug("Editing EngineerAppointment with id: {}" , engineerAppointment.getId());

        engineerAppointment.setId(id);
        engineerAppointment = engineerAppointmentService.update(engineerAppointment);
        LOGGER.debug("EngineerAppointment details with id: {}" , engineerAppointment);

        return engineerAppointment;
    }
    
    @ApiOperation(value = "Partially updates the EngineerAppointment instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EngineerAppointment patchEngineerAppointment(@PathVariable("id") Integer id, @RequestBody @MapTo(EngineerAppointment.class) Map<String, Object> engineerAppointmentPatch) {
        LOGGER.debug("Partially updating EngineerAppointment with id: {}" , id);

        EngineerAppointment engineerAppointment = engineerAppointmentService.partialUpdate(id, engineerAppointmentPatch);
        LOGGER.debug("EngineerAppointment details after partial update: {}" , engineerAppointment);

        return engineerAppointment;
    }

    @ApiOperation(value = "Deletes the EngineerAppointment instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEngineerAppointment(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting EngineerAppointment with id: {}" , id);

        EngineerAppointment deletedEngineerAppointment = engineerAppointmentService.delete(id);

        return deletedEngineerAppointment != null;
    }

    /**
     * @deprecated Use {@link #findEngineerAppointments(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EngineerAppointment instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EngineerAppointment> searchEngineerAppointmentsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EngineerAppointments list by query filter:{}", (Object) queryFilters);
        return engineerAppointmentService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EngineerAppointment instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EngineerAppointment> findEngineerAppointments(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EngineerAppointments list by filter:", query);
        return engineerAppointmentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EngineerAppointment instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EngineerAppointment> filterEngineerAppointments(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EngineerAppointments list by filter", query);
        return engineerAppointmentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEngineerAppointments(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return engineerAppointmentService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportEngineerAppointmentsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = EngineerAppointment.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> engineerAppointmentService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of EngineerAppointment instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEngineerAppointments( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EngineerAppointments");
		return engineerAppointmentService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEngineerAppointmentAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return engineerAppointmentService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/rmas")
    @ApiOperation(value = "Gets the rmas instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Rma> findAssociatedRmas(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated rmas");
        return engineerAppointmentService.findAssociatedRmas(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EngineerAppointmentService instance
	 */
	protected void setEngineerAppointmentService(EngineerAppointmentService service) {
		this.engineerAppointmentService = service;
	}

}
