/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.servicetracker.supportdb.FaultAnalysis;
import com.wavemaker.servicetracker.supportdb.RepairActivity;
import com.wavemaker.servicetracker.supportdb.service.FaultAnalysisService;


/**
 * Controller object for domain model class FaultAnalysis.
 * @see FaultAnalysis
 */
@RestController("SupportDB.FaultAnalysisController")
@Api(value = "FaultAnalysisController", description = "Exposes APIs to work with FaultAnalysis resource.")
@RequestMapping("/SupportDB/FaultAnalysis")
public class FaultAnalysisController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FaultAnalysisController.class);

    @Autowired
	@Qualifier("SupportDB.FaultAnalysisService")
	private FaultAnalysisService faultAnalysisService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new FaultAnalysis instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FaultAnalysis createFaultAnalysis(@RequestBody FaultAnalysis faultAnalysis) {
		LOGGER.debug("Create FaultAnalysis with information: {}" , faultAnalysis);

		faultAnalysis = faultAnalysisService.create(faultAnalysis);
		LOGGER.debug("Created FaultAnalysis with information: {}" , faultAnalysis);

	    return faultAnalysis;
	}

    @ApiOperation(value = "Returns the FaultAnalysis instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FaultAnalysis getFaultAnalysis(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting FaultAnalysis with id: {}" , id);

        FaultAnalysis foundFaultAnalysis = faultAnalysisService.getById(id);
        LOGGER.debug("FaultAnalysis details with id: {}" , foundFaultAnalysis);

        return foundFaultAnalysis;
    }

    @ApiOperation(value = "Updates the FaultAnalysis instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FaultAnalysis editFaultAnalysis(@PathVariable("id") Integer id, @RequestBody FaultAnalysis faultAnalysis) {
        LOGGER.debug("Editing FaultAnalysis with id: {}" , faultAnalysis.getId());

        faultAnalysis.setId(id);
        faultAnalysis = faultAnalysisService.update(faultAnalysis);
        LOGGER.debug("FaultAnalysis details with id: {}" , faultAnalysis);

        return faultAnalysis;
    }
    
    @ApiOperation(value = "Partially updates the FaultAnalysis instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FaultAnalysis patchFaultAnalysis(@PathVariable("id") Integer id, @RequestBody @MapTo(FaultAnalysis.class) Map<String, Object> faultAnalysisPatch) {
        LOGGER.debug("Partially updating FaultAnalysis with id: {}" , id);

        FaultAnalysis faultAnalysis = faultAnalysisService.partialUpdate(id, faultAnalysisPatch);
        LOGGER.debug("FaultAnalysis details after partial update: {}" , faultAnalysis);

        return faultAnalysis;
    }

    @ApiOperation(value = "Deletes the FaultAnalysis instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteFaultAnalysis(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting FaultAnalysis with id: {}" , id);

        FaultAnalysis deletedFaultAnalysis = faultAnalysisService.delete(id);

        return deletedFaultAnalysis != null;
    }

    /**
     * @deprecated Use {@link #findFaultAnalyses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of FaultAnalysis instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FaultAnalysis> searchFaultAnalysesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering FaultAnalyses list by query filter:{}", (Object) queryFilters);
        return faultAnalysisService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of FaultAnalysis instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FaultAnalysis> findFaultAnalyses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FaultAnalyses list by filter:", query);
        return faultAnalysisService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of FaultAnalysis instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FaultAnalysis> filterFaultAnalyses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FaultAnalyses list by filter", query);
        return faultAnalysisService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFaultAnalyses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return faultAnalysisService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportFaultAnalysesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = FaultAnalysis.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> faultAnalysisService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of FaultAnalysis instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countFaultAnalyses( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting FaultAnalyses");
		return faultAnalysisService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getFaultAnalysisAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return faultAnalysisService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/repairActivities")
    @ApiOperation(value = "Gets the repairActivities instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RepairActivity> findAssociatedRepairActivities(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated repairActivities");
        return faultAnalysisService.findAssociatedRepairActivities(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FaultAnalysisService instance
	 */
	protected void setFaultAnalysisService(FaultAnalysisService service) {
		this.faultAnalysisService = service;
	}

}
