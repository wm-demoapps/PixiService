/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.servicetracker.supportdb.PartSale;
import com.wavemaker.servicetracker.supportdb.service.PartSaleService;


/**
 * Controller object for domain model class PartSale.
 * @see PartSale
 */
@RestController("SupportDB.PartSaleController")
@Api(value = "PartSaleController", description = "Exposes APIs to work with PartSale resource.")
@RequestMapping("/SupportDB/PartSale")
public class PartSaleController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PartSaleController.class);

    @Autowired
	@Qualifier("SupportDB.PartSaleService")
	private PartSaleService partSaleService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new PartSale instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartSale createPartSale(@RequestBody PartSale partSale) {
		LOGGER.debug("Create PartSale with information: {}" , partSale);

		partSale = partSaleService.create(partSale);
		LOGGER.debug("Created PartSale with information: {}" , partSale);

	    return partSale;
	}

    @ApiOperation(value = "Returns the PartSale instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartSale getPartSale(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting PartSale with id: {}" , id);

        PartSale foundPartSale = partSaleService.getById(id);
        LOGGER.debug("PartSale details with id: {}" , foundPartSale);

        return foundPartSale;
    }

    @ApiOperation(value = "Updates the PartSale instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartSale editPartSale(@PathVariable("id") Integer id, @RequestBody PartSale partSale) {
        LOGGER.debug("Editing PartSale with id: {}" , partSale.getId());

        partSale.setId(id);
        partSale = partSaleService.update(partSale);
        LOGGER.debug("PartSale details with id: {}" , partSale);

        return partSale;
    }
    
    @ApiOperation(value = "Partially updates the PartSale instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartSale patchPartSale(@PathVariable("id") Integer id, @RequestBody @MapTo(PartSale.class) Map<String, Object> partSalePatch) {
        LOGGER.debug("Partially updating PartSale with id: {}" , id);

        PartSale partSale = partSaleService.partialUpdate(id, partSalePatch);
        LOGGER.debug("PartSale details after partial update: {}" , partSale);

        return partSale;
    }

    @ApiOperation(value = "Deletes the PartSale instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePartSale(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting PartSale with id: {}" , id);

        PartSale deletedPartSale = partSaleService.delete(id);

        return deletedPartSale != null;
    }

    /**
     * @deprecated Use {@link #findPartSales(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PartSale instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartSale> searchPartSalesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PartSales list by query filter:{}", (Object) queryFilters);
        return partSaleService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PartSale instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartSale> findPartSales(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PartSales list by filter:", query);
        return partSaleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PartSale instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartSale> filterPartSales(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PartSales list by filter", query);
        return partSaleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPartSales(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return partSaleService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPartSalesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = PartSale.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> partSaleService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of PartSale instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPartSales( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PartSales");
		return partSaleService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPartSaleAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return partSaleService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PartSaleService instance
	 */
	protected void setPartSaleService(PartSaleService service) {
		this.partSaleService = service;
	}

}
