/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.servicetracker.supportdb.Engineer;
import com.wavemaker.servicetracker.supportdb.Rma;
import com.wavemaker.servicetracker.supportdb.ServiceType;
import com.wavemaker.servicetracker.supportdb.service.ServiceTypeService;


/**
 * Controller object for domain model class ServiceType.
 * @see ServiceType
 */
@RestController("SupportDB.ServiceTypeController")
@Api(value = "ServiceTypeController", description = "Exposes APIs to work with ServiceType resource.")
@RequestMapping("/SupportDB/ServiceType")
public class ServiceTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServiceTypeController.class);

    @Autowired
	@Qualifier("SupportDB.ServiceTypeService")
	private ServiceTypeService serviceTypeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ServiceType instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ServiceType createServiceType(@RequestBody ServiceType serviceType) {
		LOGGER.debug("Create ServiceType with information: {}" , serviceType);

		serviceType = serviceTypeService.create(serviceType);
		LOGGER.debug("Created ServiceType with information: {}" , serviceType);

	    return serviceType;
	}

    @ApiOperation(value = "Returns the ServiceType instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ServiceType getServiceType(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting ServiceType with id: {}" , id);

        ServiceType foundServiceType = serviceTypeService.getById(id);
        LOGGER.debug("ServiceType details with id: {}" , foundServiceType);

        return foundServiceType;
    }

    @ApiOperation(value = "Updates the ServiceType instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ServiceType editServiceType(@PathVariable("id") Integer id, @RequestBody ServiceType serviceType) {
        LOGGER.debug("Editing ServiceType with id: {}" , serviceType.getId());

        serviceType.setId(id);
        serviceType = serviceTypeService.update(serviceType);
        LOGGER.debug("ServiceType details with id: {}" , serviceType);

        return serviceType;
    }
    
    @ApiOperation(value = "Partially updates the ServiceType instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ServiceType patchServiceType(@PathVariable("id") Integer id, @RequestBody @MapTo(ServiceType.class) Map<String, Object> serviceTypePatch) {
        LOGGER.debug("Partially updating ServiceType with id: {}" , id);

        ServiceType serviceType = serviceTypeService.partialUpdate(id, serviceTypePatch);
        LOGGER.debug("ServiceType details after partial update: {}" , serviceType);

        return serviceType;
    }

    @ApiOperation(value = "Deletes the ServiceType instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteServiceType(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting ServiceType with id: {}" , id);

        ServiceType deletedServiceType = serviceTypeService.delete(id);

        return deletedServiceType != null;
    }

    /**
     * @deprecated Use {@link #findServiceTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ServiceType instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ServiceType> searchServiceTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ServiceTypes list by query filter:{}", (Object) queryFilters);
        return serviceTypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ServiceType instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ServiceType> findServiceTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ServiceTypes list by filter:", query);
        return serviceTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ServiceType instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ServiceType> filterServiceTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ServiceTypes list by filter", query);
        return serviceTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportServiceTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return serviceTypeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportServiceTypesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ServiceType.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> serviceTypeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ServiceType instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countServiceTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ServiceTypes");
		return serviceTypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getServiceTypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return serviceTypeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/engineers")
    @ApiOperation(value = "Gets the engineers instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Engineer> findAssociatedEngineers(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated engineers");
        return serviceTypeService.findAssociatedEngineers(id, pageable);
    }

    @GetMapping(value="/{id:.+}/rmas")
    @ApiOperation(value = "Gets the rmas instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Rma> findAssociatedRmas(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated rmas");
        return serviceTypeService.findAssociatedRmas(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ServiceTypeService instance
	 */
	protected void setServiceTypeService(ServiceTypeService service) {
		this.serviceTypeService = service;
	}

}
