/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.servicetracker.supportdb.Rma;
import com.wavemaker.servicetracker.supportdb.ServiceArea;
import com.wavemaker.servicetracker.supportdb.service.ServiceAreaService;


/**
 * Controller object for domain model class ServiceArea.
 * @see ServiceArea
 */
@RestController("SupportDB.ServiceAreaController")
@Api(value = "ServiceAreaController", description = "Exposes APIs to work with ServiceArea resource.")
@RequestMapping("/SupportDB/ServiceArea")
public class ServiceAreaController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServiceAreaController.class);

    @Autowired
	@Qualifier("SupportDB.ServiceAreaService")
	private ServiceAreaService serviceAreaService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ServiceArea instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ServiceArea createServiceArea(@RequestBody ServiceArea serviceArea) {
		LOGGER.debug("Create ServiceArea with information: {}" , serviceArea);

		serviceArea = serviceAreaService.create(serviceArea);
		LOGGER.debug("Created ServiceArea with information: {}" , serviceArea);

	    return serviceArea;
	}

    @ApiOperation(value = "Returns the ServiceArea instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ServiceArea getServiceArea(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting ServiceArea with id: {}" , id);

        ServiceArea foundServiceArea = serviceAreaService.getById(id);
        LOGGER.debug("ServiceArea details with id: {}" , foundServiceArea);

        return foundServiceArea;
    }

    @ApiOperation(value = "Updates the ServiceArea instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ServiceArea editServiceArea(@PathVariable("id") Integer id, @RequestBody ServiceArea serviceArea) {
        LOGGER.debug("Editing ServiceArea with id: {}" , serviceArea.getId());

        serviceArea.setId(id);
        serviceArea = serviceAreaService.update(serviceArea);
        LOGGER.debug("ServiceArea details with id: {}" , serviceArea);

        return serviceArea;
    }
    
    @ApiOperation(value = "Partially updates the ServiceArea instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ServiceArea patchServiceArea(@PathVariable("id") Integer id, @RequestBody @MapTo(ServiceArea.class) Map<String, Object> serviceAreaPatch) {
        LOGGER.debug("Partially updating ServiceArea with id: {}" , id);

        ServiceArea serviceArea = serviceAreaService.partialUpdate(id, serviceAreaPatch);
        LOGGER.debug("ServiceArea details after partial update: {}" , serviceArea);

        return serviceArea;
    }

    @ApiOperation(value = "Deletes the ServiceArea instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteServiceArea(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting ServiceArea with id: {}" , id);

        ServiceArea deletedServiceArea = serviceAreaService.delete(id);

        return deletedServiceArea != null;
    }

    /**
     * @deprecated Use {@link #findServiceAreas(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ServiceArea instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ServiceArea> searchServiceAreasByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ServiceAreas list by query filter:{}", (Object) queryFilters);
        return serviceAreaService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ServiceArea instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ServiceArea> findServiceAreas(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ServiceAreas list by filter:", query);
        return serviceAreaService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ServiceArea instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ServiceArea> filterServiceAreas(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ServiceAreas list by filter", query);
        return serviceAreaService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportServiceAreas(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return serviceAreaService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportServiceAreasAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ServiceArea.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> serviceAreaService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ServiceArea instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countServiceAreas( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ServiceAreas");
		return serviceAreaService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getServiceAreaAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return serviceAreaService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/rmas")
    @ApiOperation(value = "Gets the rmas instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Rma> findAssociatedRmas(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated rmas");
        return serviceAreaService.findAssociatedRmas(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ServiceAreaService instance
	 */
	protected void setServiceAreaService(ServiceAreaService service) {
		this.serviceAreaService = service;
	}

}
