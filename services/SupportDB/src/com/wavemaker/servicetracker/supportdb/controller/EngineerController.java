/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.servicetracker.supportdb.Engineer;
import com.wavemaker.servicetracker.supportdb.EngineerAppointment;
import com.wavemaker.servicetracker.supportdb.service.EngineerService;


/**
 * Controller object for domain model class Engineer.
 * @see Engineer
 */
@RestController("SupportDB.EngineerController")
@Api(value = "EngineerController", description = "Exposes APIs to work with Engineer resource.")
@RequestMapping("/SupportDB/Engineer")
public class EngineerController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EngineerController.class);

    @Autowired
	@Qualifier("SupportDB.EngineerService")
	private EngineerService engineerService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Engineer instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Engineer createEngineer(@RequestBody Engineer engineer) {
		LOGGER.debug("Create Engineer with information: {}" , engineer);

		engineer = engineerService.create(engineer);
		LOGGER.debug("Created Engineer with information: {}" , engineer);

	    return engineer;
	}

    @ApiOperation(value = "Returns the Engineer instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Engineer getEngineer(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Engineer with id: {}" , id);

        Engineer foundEngineer = engineerService.getById(id);
        LOGGER.debug("Engineer details with id: {}" , foundEngineer);

        return foundEngineer;
    }

    @ApiOperation(value = "Updates the Engineer instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Engineer editEngineer(@PathVariable("id") Integer id, @RequestBody Engineer engineer) {
        LOGGER.debug("Editing Engineer with id: {}" , engineer.getId());

        engineer.setId(id);
        engineer = engineerService.update(engineer);
        LOGGER.debug("Engineer details with id: {}" , engineer);

        return engineer;
    }
    
    @ApiOperation(value = "Partially updates the Engineer instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Engineer patchEngineer(@PathVariable("id") Integer id, @RequestBody @MapTo(Engineer.class) Map<String, Object> engineerPatch) {
        LOGGER.debug("Partially updating Engineer with id: {}" , id);

        Engineer engineer = engineerService.partialUpdate(id, engineerPatch);
        LOGGER.debug("Engineer details after partial update: {}" , engineer);

        return engineer;
    }

    @ApiOperation(value = "Deletes the Engineer instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEngineer(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Engineer with id: {}" , id);

        Engineer deletedEngineer = engineerService.delete(id);

        return deletedEngineer != null;
    }

    /**
     * @deprecated Use {@link #findEngineers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Engineer instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Engineer> searchEngineersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Engineers list by query filter:{}", (Object) queryFilters);
        return engineerService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Engineer instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Engineer> findEngineers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Engineers list by filter:", query);
        return engineerService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Engineer instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Engineer> filterEngineers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Engineers list by filter", query);
        return engineerService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEngineers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return engineerService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportEngineersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Engineer.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> engineerService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Engineer instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEngineers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Engineers");
		return engineerService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEngineerAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return engineerService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/engineerAppointments")
    @ApiOperation(value = "Gets the engineerAppointments instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EngineerAppointment> findAssociatedEngineerAppointments(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated engineerAppointments");
        return engineerService.findAssociatedEngineerAppointments(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EngineerService instance
	 */
	protected void setEngineerService(EngineerService service) {
		this.engineerService = service;
	}

}
