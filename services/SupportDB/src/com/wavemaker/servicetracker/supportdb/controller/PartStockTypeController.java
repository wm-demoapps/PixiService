/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.servicetracker.supportdb.Part;
import com.wavemaker.servicetracker.supportdb.PartStockType;
import com.wavemaker.servicetracker.supportdb.service.PartStockTypeService;


/**
 * Controller object for domain model class PartStockType.
 * @see PartStockType
 */
@RestController("SupportDB.PartStockTypeController")
@Api(value = "PartStockTypeController", description = "Exposes APIs to work with PartStockType resource.")
@RequestMapping("/SupportDB/PartStockType")
public class PartStockTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PartStockTypeController.class);

    @Autowired
	@Qualifier("SupportDB.PartStockTypeService")
	private PartStockTypeService partStockTypeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new PartStockType instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartStockType createPartStockType(@RequestBody PartStockType partStockType) {
		LOGGER.debug("Create PartStockType with information: {}" , partStockType);

		partStockType = partStockTypeService.create(partStockType);
		LOGGER.debug("Created PartStockType with information: {}" , partStockType);

	    return partStockType;
	}

    @ApiOperation(value = "Returns the PartStockType instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartStockType getPartStockType(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting PartStockType with id: {}" , id);

        PartStockType foundPartStockType = partStockTypeService.getById(id);
        LOGGER.debug("PartStockType details with id: {}" , foundPartStockType);

        return foundPartStockType;
    }

    @ApiOperation(value = "Updates the PartStockType instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartStockType editPartStockType(@PathVariable("id") Integer id, @RequestBody PartStockType partStockType) {
        LOGGER.debug("Editing PartStockType with id: {}" , partStockType.getId());

        partStockType.setId(id);
        partStockType = partStockTypeService.update(partStockType);
        LOGGER.debug("PartStockType details with id: {}" , partStockType);

        return partStockType;
    }
    
    @ApiOperation(value = "Partially updates the PartStockType instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartStockType patchPartStockType(@PathVariable("id") Integer id, @RequestBody @MapTo(PartStockType.class) Map<String, Object> partStockTypePatch) {
        LOGGER.debug("Partially updating PartStockType with id: {}" , id);

        PartStockType partStockType = partStockTypeService.partialUpdate(id, partStockTypePatch);
        LOGGER.debug("PartStockType details after partial update: {}" , partStockType);

        return partStockType;
    }

    @ApiOperation(value = "Deletes the PartStockType instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePartStockType(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting PartStockType with id: {}" , id);

        PartStockType deletedPartStockType = partStockTypeService.delete(id);

        return deletedPartStockType != null;
    }

    /**
     * @deprecated Use {@link #findPartStockTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PartStockType instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartStockType> searchPartStockTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PartStockTypes list by query filter:{}", (Object) queryFilters);
        return partStockTypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PartStockType instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartStockType> findPartStockTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PartStockTypes list by filter:", query);
        return partStockTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PartStockType instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartStockType> filterPartStockTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PartStockTypes list by filter", query);
        return partStockTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPartStockTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return partStockTypeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPartStockTypesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = PartStockType.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> partStockTypeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of PartStockType instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPartStockTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PartStockTypes");
		return partStockTypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPartStockTypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return partStockTypeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/parts")
    @ApiOperation(value = "Gets the parts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Part> findAssociatedParts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated parts");
        return partStockTypeService.findAssociatedParts(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PartStockTypeService instance
	 */
	protected void setPartStockTypeService(PartStockTypeService service) {
		this.partStockTypeService = service;
	}

}
