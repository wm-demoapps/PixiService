/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.servicetracker.supportdb.JobRequest;
import com.wavemaker.servicetracker.supportdb.ProductSerial;
import com.wavemaker.servicetracker.supportdb.service.ProductSerialService;


/**
 * Controller object for domain model class ProductSerial.
 * @see ProductSerial
 */
@RestController("SupportDB.ProductSerialController")
@Api(value = "ProductSerialController", description = "Exposes APIs to work with ProductSerial resource.")
@RequestMapping("/SupportDB/ProductSerial")
public class ProductSerialController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductSerialController.class);

    @Autowired
	@Qualifier("SupportDB.ProductSerialService")
	private ProductSerialService productSerialService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ProductSerial instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ProductSerial createProductSerial(@RequestBody ProductSerial productSerial) {
		LOGGER.debug("Create ProductSerial with information: {}" , productSerial);

		productSerial = productSerialService.create(productSerial);
		LOGGER.debug("Created ProductSerial with information: {}" , productSerial);

	    return productSerial;
	}

    @ApiOperation(value = "Returns the ProductSerial instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ProductSerial getProductSerial(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting ProductSerial with id: {}" , id);

        ProductSerial foundProductSerial = productSerialService.getById(id);
        LOGGER.debug("ProductSerial details with id: {}" , foundProductSerial);

        return foundProductSerial;
    }

    @ApiOperation(value = "Updates the ProductSerial instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ProductSerial editProductSerial(@PathVariable("id") Integer id, @RequestBody ProductSerial productSerial) {
        LOGGER.debug("Editing ProductSerial with id: {}" , productSerial.getId());

        productSerial.setId(id);
        productSerial = productSerialService.update(productSerial);
        LOGGER.debug("ProductSerial details with id: {}" , productSerial);

        return productSerial;
    }
    
    @ApiOperation(value = "Partially updates the ProductSerial instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ProductSerial patchProductSerial(@PathVariable("id") Integer id, @RequestBody @MapTo(ProductSerial.class) Map<String, Object> productSerialPatch) {
        LOGGER.debug("Partially updating ProductSerial with id: {}" , id);

        ProductSerial productSerial = productSerialService.partialUpdate(id, productSerialPatch);
        LOGGER.debug("ProductSerial details after partial update: {}" , productSerial);

        return productSerial;
    }

    @ApiOperation(value = "Deletes the ProductSerial instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteProductSerial(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting ProductSerial with id: {}" , id);

        ProductSerial deletedProductSerial = productSerialService.delete(id);

        return deletedProductSerial != null;
    }

    /**
     * @deprecated Use {@link #findProductSerials(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ProductSerial instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ProductSerial> searchProductSerialsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ProductSerials list by query filter:{}", (Object) queryFilters);
        return productSerialService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ProductSerial instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ProductSerial> findProductSerials(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ProductSerials list by filter:", query);
        return productSerialService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ProductSerial instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ProductSerial> filterProductSerials(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ProductSerials list by filter", query);
        return productSerialService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportProductSerials(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return productSerialService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportProductSerialsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ProductSerial.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> productSerialService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ProductSerial instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countProductSerials( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ProductSerials");
		return productSerialService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getProductSerialAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return productSerialService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/jobRequests")
    @ApiOperation(value = "Gets the jobRequests instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<JobRequest> findAssociatedJobRequests(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated jobRequests");
        return productSerialService.findAssociatedJobRequests(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ProductSerialService instance
	 */
	protected void setProductSerialService(ProductSerialService service) {
		this.productSerialService = service;
	}

}
