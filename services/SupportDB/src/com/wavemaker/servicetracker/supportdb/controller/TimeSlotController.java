/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.servicetracker.supportdb.EngineerAppointment;
import com.wavemaker.servicetracker.supportdb.TimeSlot;
import com.wavemaker.servicetracker.supportdb.service.TimeSlotService;


/**
 * Controller object for domain model class TimeSlot.
 * @see TimeSlot
 */
@RestController("SupportDB.TimeSlotController")
@Api(value = "TimeSlotController", description = "Exposes APIs to work with TimeSlot resource.")
@RequestMapping("/SupportDB/TimeSlot")
public class TimeSlotController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TimeSlotController.class);

    @Autowired
	@Qualifier("SupportDB.TimeSlotService")
	private TimeSlotService timeSlotService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TimeSlot instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TimeSlot createTimeSlot(@RequestBody TimeSlot timeSlot) {
		LOGGER.debug("Create TimeSlot with information: {}" , timeSlot);

		timeSlot = timeSlotService.create(timeSlot);
		LOGGER.debug("Created TimeSlot with information: {}" , timeSlot);

	    return timeSlot;
	}

    @ApiOperation(value = "Returns the TimeSlot instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TimeSlot getTimeSlot(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting TimeSlot with id: {}" , id);

        TimeSlot foundTimeSlot = timeSlotService.getById(id);
        LOGGER.debug("TimeSlot details with id: {}" , foundTimeSlot);

        return foundTimeSlot;
    }

    @ApiOperation(value = "Updates the TimeSlot instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TimeSlot editTimeSlot(@PathVariable("id") Integer id, @RequestBody TimeSlot timeSlot) {
        LOGGER.debug("Editing TimeSlot with id: {}" , timeSlot.getId());

        timeSlot.setId(id);
        timeSlot = timeSlotService.update(timeSlot);
        LOGGER.debug("TimeSlot details with id: {}" , timeSlot);

        return timeSlot;
    }
    
    @ApiOperation(value = "Partially updates the TimeSlot instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TimeSlot patchTimeSlot(@PathVariable("id") Integer id, @RequestBody @MapTo(TimeSlot.class) Map<String, Object> timeSlotPatch) {
        LOGGER.debug("Partially updating TimeSlot with id: {}" , id);

        TimeSlot timeSlot = timeSlotService.partialUpdate(id, timeSlotPatch);
        LOGGER.debug("TimeSlot details after partial update: {}" , timeSlot);

        return timeSlot;
    }

    @ApiOperation(value = "Deletes the TimeSlot instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTimeSlot(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting TimeSlot with id: {}" , id);

        TimeSlot deletedTimeSlot = timeSlotService.delete(id);

        return deletedTimeSlot != null;
    }

    /**
     * @deprecated Use {@link #findTimeSlots(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TimeSlot instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TimeSlot> searchTimeSlotsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TimeSlots list by query filter:{}", (Object) queryFilters);
        return timeSlotService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TimeSlot instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TimeSlot> findTimeSlots(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TimeSlots list by filter:", query);
        return timeSlotService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TimeSlot instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TimeSlot> filterTimeSlots(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TimeSlots list by filter", query);
        return timeSlotService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTimeSlots(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return timeSlotService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTimeSlotsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TimeSlot.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> timeSlotService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TimeSlot instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTimeSlots( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TimeSlots");
		return timeSlotService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTimeSlotAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return timeSlotService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/engineerAppointments")
    @ApiOperation(value = "Gets the engineerAppointments instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EngineerAppointment> findAssociatedEngineerAppointments(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated engineerAppointments");
        return timeSlotService.findAssociatedEngineerAppointments(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TimeSlotService instance
	 */
	protected void setTimeSlotService(TimeSlotService service) {
		this.timeSlotService = service;
	}

}
