/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.servicetracker.supportdb.CustomerSatisfaction;
import com.wavemaker.servicetracker.supportdb.Rating;
import com.wavemaker.servicetracker.supportdb.service.RatingService;


/**
 * Controller object for domain model class Rating.
 * @see Rating
 */
@RestController("SupportDB.RatingController")
@Api(value = "RatingController", description = "Exposes APIs to work with Rating resource.")
@RequestMapping("/SupportDB/Rating")
public class RatingController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RatingController.class);

    @Autowired
	@Qualifier("SupportDB.RatingService")
	private RatingService ratingService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Rating instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Rating createRating(@RequestBody Rating ratingInstance) {
		LOGGER.debug("Create Rating with information: {}" , ratingInstance);

		ratingInstance = ratingService.create(ratingInstance);
		LOGGER.debug("Created Rating with information: {}" , ratingInstance);

	    return ratingInstance;
	}

    @ApiOperation(value = "Returns the Rating instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Rating getRating(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Rating with id: {}" , id);

        Rating foundRating = ratingService.getById(id);
        LOGGER.debug("Rating details with id: {}" , foundRating);

        return foundRating;
    }

    @ApiOperation(value = "Updates the Rating instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Rating editRating(@PathVariable("id") Integer id, @RequestBody Rating ratingInstance) {
        LOGGER.debug("Editing Rating with id: {}" , ratingInstance.getId());

        ratingInstance.setId(id);
        ratingInstance = ratingService.update(ratingInstance);
        LOGGER.debug("Rating details with id: {}" , ratingInstance);

        return ratingInstance;
    }
    
    @ApiOperation(value = "Partially updates the Rating instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Rating patchRating(@PathVariable("id") Integer id, @RequestBody @MapTo(Rating.class) Map<String, Object> ratingInstancePatch) {
        LOGGER.debug("Partially updating Rating with id: {}" , id);

        Rating ratingInstance = ratingService.partialUpdate(id, ratingInstancePatch);
        LOGGER.debug("Rating details after partial update: {}" , ratingInstance);

        return ratingInstance;
    }

    @ApiOperation(value = "Deletes the Rating instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRating(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Rating with id: {}" , id);

        Rating deletedRating = ratingService.delete(id);

        return deletedRating != null;
    }

    /**
     * @deprecated Use {@link #findRatings(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Rating instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Rating> searchRatingsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Ratings list by query filter:{}", (Object) queryFilters);
        return ratingService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Rating instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Rating> findRatings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Ratings list by filter:", query);
        return ratingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Rating instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Rating> filterRatings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Ratings list by filter", query);
        return ratingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRatings(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return ratingService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportRatingsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Rating.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> ratingService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Rating instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRatings( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Ratings");
		return ratingService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRatingAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return ratingService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/customerSatisfactions")
    @ApiOperation(value = "Gets the customerSatisfactions instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CustomerSatisfaction> findAssociatedCustomerSatisfactions(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated customerSatisfactions");
        return ratingService.findAssociatedCustomerSatisfactions(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RatingService instance
	 */
	protected void setRatingService(RatingService service) {
		this.ratingService = service;
	}

}
