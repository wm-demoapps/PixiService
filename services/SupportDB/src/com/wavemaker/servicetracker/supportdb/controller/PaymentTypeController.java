/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.servicetracker.supportdb.PartSale;
import com.wavemaker.servicetracker.supportdb.PaymentType;
import com.wavemaker.servicetracker.supportdb.Rma;
import com.wavemaker.servicetracker.supportdb.service.PaymentTypeService;


/**
 * Controller object for domain model class PaymentType.
 * @see PaymentType
 */
@RestController("SupportDB.PaymentTypeController")
@Api(value = "PaymentTypeController", description = "Exposes APIs to work with PaymentType resource.")
@RequestMapping("/SupportDB/PaymentType")
public class PaymentTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PaymentTypeController.class);

    @Autowired
	@Qualifier("SupportDB.PaymentTypeService")
	private PaymentTypeService paymentTypeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new PaymentType instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PaymentType createPaymentType(@RequestBody PaymentType paymentType) {
		LOGGER.debug("Create PaymentType with information: {}" , paymentType);

		paymentType = paymentTypeService.create(paymentType);
		LOGGER.debug("Created PaymentType with information: {}" , paymentType);

	    return paymentType;
	}

    @ApiOperation(value = "Returns the PaymentType instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PaymentType getPaymentType(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting PaymentType with id: {}" , id);

        PaymentType foundPaymentType = paymentTypeService.getById(id);
        LOGGER.debug("PaymentType details with id: {}" , foundPaymentType);

        return foundPaymentType;
    }

    @ApiOperation(value = "Updates the PaymentType instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PaymentType editPaymentType(@PathVariable("id") Integer id, @RequestBody PaymentType paymentType) {
        LOGGER.debug("Editing PaymentType with id: {}" , paymentType.getId());

        paymentType.setId(id);
        paymentType = paymentTypeService.update(paymentType);
        LOGGER.debug("PaymentType details with id: {}" , paymentType);

        return paymentType;
    }
    
    @ApiOperation(value = "Partially updates the PaymentType instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PaymentType patchPaymentType(@PathVariable("id") Integer id, @RequestBody @MapTo(PaymentType.class) Map<String, Object> paymentTypePatch) {
        LOGGER.debug("Partially updating PaymentType with id: {}" , id);

        PaymentType paymentType = paymentTypeService.partialUpdate(id, paymentTypePatch);
        LOGGER.debug("PaymentType details after partial update: {}" , paymentType);

        return paymentType;
    }

    @ApiOperation(value = "Deletes the PaymentType instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePaymentType(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting PaymentType with id: {}" , id);

        PaymentType deletedPaymentType = paymentTypeService.delete(id);

        return deletedPaymentType != null;
    }

    /**
     * @deprecated Use {@link #findPaymentTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PaymentType instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PaymentType> searchPaymentTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PaymentTypes list by query filter:{}", (Object) queryFilters);
        return paymentTypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PaymentType instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PaymentType> findPaymentTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PaymentTypes list by filter:", query);
        return paymentTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PaymentType instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PaymentType> filterPaymentTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PaymentTypes list by filter", query);
        return paymentTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPaymentTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return paymentTypeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPaymentTypesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = PaymentType.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> paymentTypeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of PaymentType instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPaymentTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PaymentTypes");
		return paymentTypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPaymentTypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return paymentTypeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/partSales")
    @ApiOperation(value = "Gets the partSales instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartSale> findAssociatedPartSales(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated partSales");
        return paymentTypeService.findAssociatedPartSales(id, pageable);
    }

    @GetMapping(value="/{id:.+}/rmas")
    @ApiOperation(value = "Gets the rmas instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Rma> findAssociatedRmas(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated rmas");
        return paymentTypeService.findAssociatedRmas(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PaymentTypeService instance
	 */
	protected void setPaymentTypeService(PaymentTypeService service) {
		this.paymentTypeService = service;
	}

}
