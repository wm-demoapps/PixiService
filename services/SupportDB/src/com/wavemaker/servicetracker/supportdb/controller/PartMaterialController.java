/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wavemaker.servicetracker.supportdb.Part;
import com.wavemaker.servicetracker.supportdb.PartMaterial;
import com.wavemaker.servicetracker.supportdb.service.PartMaterialService;


/**
 * Controller object for domain model class PartMaterial.
 * @see PartMaterial
 */
@RestController("SupportDB.PartMaterialController")
@Api(value = "PartMaterialController", description = "Exposes APIs to work with PartMaterial resource.")
@RequestMapping("/SupportDB/PartMaterial")
public class PartMaterialController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PartMaterialController.class);

    @Autowired
	@Qualifier("SupportDB.PartMaterialService")
	private PartMaterialService partMaterialService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new PartMaterial instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartMaterial createPartMaterial(@RequestBody PartMaterial partMaterial) {
		LOGGER.debug("Create PartMaterial with information: {}" , partMaterial);

		partMaterial = partMaterialService.create(partMaterial);
		LOGGER.debug("Created PartMaterial with information: {}" , partMaterial);

	    return partMaterial;
	}

    @ApiOperation(value = "Returns the PartMaterial instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartMaterial getPartMaterial(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting PartMaterial with id: {}" , id);

        PartMaterial foundPartMaterial = partMaterialService.getById(id);
        LOGGER.debug("PartMaterial details with id: {}" , foundPartMaterial);

        return foundPartMaterial;
    }

    @ApiOperation(value = "Updates the PartMaterial instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartMaterial editPartMaterial(@PathVariable("id") Integer id, @RequestBody PartMaterial partMaterial) {
        LOGGER.debug("Editing PartMaterial with id: {}" , partMaterial.getId());

        partMaterial.setId(id);
        partMaterial = partMaterialService.update(partMaterial);
        LOGGER.debug("PartMaterial details with id: {}" , partMaterial);

        return partMaterial;
    }
    
    @ApiOperation(value = "Partially updates the PartMaterial instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartMaterial patchPartMaterial(@PathVariable("id") Integer id, @RequestBody @MapTo(PartMaterial.class) Map<String, Object> partMaterialPatch) {
        LOGGER.debug("Partially updating PartMaterial with id: {}" , id);

        PartMaterial partMaterial = partMaterialService.partialUpdate(id, partMaterialPatch);
        LOGGER.debug("PartMaterial details after partial update: {}" , partMaterial);

        return partMaterial;
    }

    @ApiOperation(value = "Deletes the PartMaterial instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePartMaterial(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting PartMaterial with id: {}" , id);

        PartMaterial deletedPartMaterial = partMaterialService.delete(id);

        return deletedPartMaterial != null;
    }

    /**
     * @deprecated Use {@link #findPartMaterials(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PartMaterial instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartMaterial> searchPartMaterialsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PartMaterials list by query filter:{}", (Object) queryFilters);
        return partMaterialService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PartMaterial instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartMaterial> findPartMaterials(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PartMaterials list by filter:", query);
        return partMaterialService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PartMaterial instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartMaterial> filterPartMaterials(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PartMaterials list by filter", query);
        return partMaterialService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPartMaterials(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return partMaterialService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPartMaterialsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = PartMaterial.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> partMaterialService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of PartMaterial instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPartMaterials( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PartMaterials");
		return partMaterialService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPartMaterialAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return partMaterialService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/parts")
    @ApiOperation(value = "Gets the parts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Part> findAssociatedParts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated parts");
        return partMaterialService.findAssociatedParts(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PartMaterialService instance
	 */
	protected void setPartMaterialService(PartMaterialService service) {
		this.partMaterialService = service;
	}

}
