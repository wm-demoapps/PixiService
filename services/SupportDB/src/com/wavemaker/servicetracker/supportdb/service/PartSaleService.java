/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.PartSale;

/**
 * Service object for domain model class {@link PartSale}.
 */
public interface PartSaleService {

    /**
     * Creates a new PartSale. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PartSale if any.
     *
     * @param partSale Details of the PartSale to be created; value cannot be null.
     * @return The newly created PartSale.
     */
    PartSale create(@Valid PartSale partSale);


	/**
     * Returns PartSale by given id if exists.
     *
     * @param partsaleId The id of the PartSale to get; value cannot be null.
     * @return PartSale associated with the given partsaleId.
	 * @throws EntityNotFoundException If no PartSale is found.
     */
    PartSale getById(Integer partsaleId);

    /**
     * Find and return the PartSale by given id if exists, returns null otherwise.
     *
     * @param partsaleId The id of the PartSale to get; value cannot be null.
     * @return PartSale associated with the given partsaleId.
     */
    PartSale findById(Integer partsaleId);

	/**
     * Find and return the list of PartSales by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param partsaleIds The id's of the PartSale to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return PartSales associated with the given partsaleIds.
     */
    List<PartSale> findByMultipleIds(List<Integer> partsaleIds, boolean orderedReturn);


    /**
     * Updates the details of an existing PartSale. It replaces all fields of the existing PartSale with the given partSale.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PartSale if any.
     *
     * @param partSale The details of the PartSale to be updated; value cannot be null.
     * @return The updated PartSale.
     * @throws EntityNotFoundException if no PartSale is found with given input.
     */
    PartSale update(@Valid PartSale partSale);


    /**
     * Partially updates the details of an existing PartSale. It updates only the
     * fields of the existing PartSale which are passed in the partSalePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PartSale if any.
     *
     * @param partsaleId The id of the PartSale to be deleted; value cannot be null.
     * @param partSalePatch The partial data of PartSale which is supposed to be updated; value cannot be null.
     * @return The updated PartSale.
     * @throws EntityNotFoundException if no PartSale is found with given input.
     */
    PartSale partialUpdate(Integer partsaleId, Map<String, Object> partSalePatch);

    /**
     * Deletes an existing PartSale with the given id.
     *
     * @param partsaleId The id of the PartSale to be deleted; value cannot be null.
     * @return The deleted PartSale.
     * @throws EntityNotFoundException if no PartSale found with the given id.
     */
    PartSale delete(Integer partsaleId);

    /**
     * Deletes an existing PartSale with the given object.
     *
     * @param partSale The instance of the PartSale to be deleted; value cannot be null.
     */
    void delete(PartSale partSale);

    /**
     * Find all PartSales matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PartSales.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<PartSale> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all PartSales matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PartSales.
     *
     * @see Pageable
     * @see Page
     */
    Page<PartSale> findAll(String query, Pageable pageable);

    /**
     * Exports all PartSales matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all PartSales matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the PartSales in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the PartSale.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}
