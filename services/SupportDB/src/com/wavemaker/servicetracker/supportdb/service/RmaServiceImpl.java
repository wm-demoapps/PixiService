/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.CustomerSatisfaction;
import com.wavemaker.servicetracker.supportdb.RepairActivity;
import com.wavemaker.servicetracker.supportdb.Rma;


/**
 * ServiceImpl object for domain model class Rma.
 *
 * @see Rma
 */
@Service("SupportDB.RmaService")
@Validated
@EntityService(entityClass = Rma.class, serviceId = "SupportDB")
public class RmaServiceImpl implements RmaService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RmaServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SupportDB.CustomerSatisfactionService")
    private CustomerSatisfactionService customerSatisfactionService;

    @Lazy
    @Autowired
    @Qualifier("SupportDB.RepairActivityService")
    private RepairActivityService repairActivityService;

    @Autowired
    @Qualifier("SupportDB.RmaDao")
    private WMGenericDao<Rma, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Rma, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public Rma create(Rma rma) {
        LOGGER.debug("Creating a new Rma with information: {}", rma);

        Rma rmaCreated = this.wmGenericDao.create(rma);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(rmaCreated);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Rma getById(Integer rmaId) {
        LOGGER.debug("Finding Rma by id: {}", rmaId);
        return this.wmGenericDao.findById(rmaId);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Rma findById(Integer rmaId) {
        LOGGER.debug("Finding Rma by id: {}", rmaId);
        try {
            return this.wmGenericDao.findById(rmaId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Rma found with id: {}", rmaId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public List<Rma> findByMultipleIds(List<Integer> rmaIds, boolean orderedReturn) {
        LOGGER.debug("Finding Rmas by ids: {}", rmaIds);

        return this.wmGenericDao.findByMultipleIds(rmaIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SupportDBTransactionManager")
    @Override
    public Rma update(Rma rma) {
        LOGGER.debug("Updating Rma with information: {}", rma);

        this.wmGenericDao.update(rma);
        this.wmGenericDao.refresh(rma);

        return rma;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public Rma partialUpdate(Integer rmaId, Map<String, Object>rmaPatch) {
        LOGGER.debug("Partially Updating the Rma with id: {}", rmaId);

        Rma rma = getById(rmaId);

        try {
            ObjectReader rmaReader = this.objectMapper.reader().forType(Rma.class).withValueToUpdate(rma);
            rma = rmaReader.readValue(this.objectMapper.writeValueAsString(rmaPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", rmaPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        rma = update(rma);

        return rma;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public Rma delete(Integer rmaId) {
        LOGGER.debug("Deleting Rma with id: {}", rmaId);
        Rma deleted = this.wmGenericDao.findById(rmaId);
        if (deleted == null) {
            LOGGER.debug("No Rma found with id: {}", rmaId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Rma.class.getSimpleName(), rmaId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public void delete(Rma rma) {
        LOGGER.debug("Deleting Rma with {}", rma);
        this.wmGenericDao.delete(rma);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Rma> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Rmas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Rma> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Rmas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SupportDB for table Rma to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SupportDB for table Rma to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<CustomerSatisfaction> findAssociatedCustomerSatisfactions(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated customerSatisfactions");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("rma.id = '" + id + "'");

        return customerSatisfactionService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<RepairActivity> findAssociatedRepairActivities(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated repairActivities");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("rma.id = '" + id + "'");

        return repairActivityService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service CustomerSatisfactionService instance
     */
    protected void setCustomerSatisfactionService(CustomerSatisfactionService service) {
        this.customerSatisfactionService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service RepairActivityService instance
     */
    protected void setRepairActivityService(RepairActivityService service) {
        this.repairActivityService = service;
    }

}
