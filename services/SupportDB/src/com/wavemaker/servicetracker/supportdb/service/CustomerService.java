/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.Customer;
import com.wavemaker.servicetracker.supportdb.ProductSerial;

/**
 * Service object for domain model class {@link Customer}.
 */
public interface CustomerService {

    /**
     * Creates a new Customer. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Customer if any.
     *
     * @param customer Details of the Customer to be created; value cannot be null.
     * @return The newly created Customer.
     */
    Customer create(@Valid Customer customer);


	/**
     * Returns Customer by given id if exists.
     *
     * @param customerId The id of the Customer to get; value cannot be null.
     * @return Customer associated with the given customerId.
	 * @throws EntityNotFoundException If no Customer is found.
     */
    Customer getById(Integer customerId);

    /**
     * Find and return the Customer by given id if exists, returns null otherwise.
     *
     * @param customerId The id of the Customer to get; value cannot be null.
     * @return Customer associated with the given customerId.
     */
    Customer findById(Integer customerId);

	/**
     * Find and return the list of Customers by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param customerIds The id's of the Customer to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Customers associated with the given customerIds.
     */
    List<Customer> findByMultipleIds(List<Integer> customerIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Customer. It replaces all fields of the existing Customer with the given customer.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Customer if any.
     *
     * @param customer The details of the Customer to be updated; value cannot be null.
     * @return The updated Customer.
     * @throws EntityNotFoundException if no Customer is found with given input.
     */
    Customer update(@Valid Customer customer);


    /**
     * Partially updates the details of an existing Customer. It updates only the
     * fields of the existing Customer which are passed in the customerPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Customer if any.
     *
     * @param customerId The id of the Customer to be deleted; value cannot be null.
     * @param customerPatch The partial data of Customer which is supposed to be updated; value cannot be null.
     * @return The updated Customer.
     * @throws EntityNotFoundException if no Customer is found with given input.
     */
    Customer partialUpdate(Integer customerId, Map<String, Object> customerPatch);

    /**
     * Deletes an existing Customer with the given id.
     *
     * @param customerId The id of the Customer to be deleted; value cannot be null.
     * @return The deleted Customer.
     * @throws EntityNotFoundException if no Customer found with the given id.
     */
    Customer delete(Integer customerId);

    /**
     * Deletes an existing Customer with the given object.
     *
     * @param customer The instance of the Customer to be deleted; value cannot be null.
     */
    void delete(Customer customer);

    /**
     * Find all Customers matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Customers.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Customer> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Customers matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Customers.
     *
     * @see Pageable
     * @see Page
     */
    Page<Customer> findAll(String query, Pageable pageable);

    /**
     * Exports all Customers matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Customers matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Customers in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Customer.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated productSerials for given Customer id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated ProductSerial instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<ProductSerial> findAssociatedProductSerials(Integer id, Pageable pageable);

}
