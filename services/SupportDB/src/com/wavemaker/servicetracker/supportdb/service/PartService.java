/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.Part;
import com.wavemaker.servicetracker.supportdb.PartSale;

/**
 * Service object for domain model class {@link Part}.
 */
public interface PartService {

    /**
     * Creates a new Part. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Part if any.
     *
     * @param part Details of the Part to be created; value cannot be null.
     * @return The newly created Part.
     */
    Part create(@Valid Part part);


	/**
     * Returns Part by given id if exists.
     *
     * @param partId The id of the Part to get; value cannot be null.
     * @return Part associated with the given partId.
	 * @throws EntityNotFoundException If no Part is found.
     */
    Part getById(Integer partId);

    /**
     * Find and return the Part by given id if exists, returns null otherwise.
     *
     * @param partId The id of the Part to get; value cannot be null.
     * @return Part associated with the given partId.
     */
    Part findById(Integer partId);

	/**
     * Find and return the list of Parts by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param partIds The id's of the Part to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Parts associated with the given partIds.
     */
    List<Part> findByMultipleIds(List<Integer> partIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Part. It replaces all fields of the existing Part with the given part.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Part if any.
     *
     * @param part The details of the Part to be updated; value cannot be null.
     * @return The updated Part.
     * @throws EntityNotFoundException if no Part is found with given input.
     */
    Part update(@Valid Part part);


    /**
     * Partially updates the details of an existing Part. It updates only the
     * fields of the existing Part which are passed in the partPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Part if any.
     *
     * @param partId The id of the Part to be deleted; value cannot be null.
     * @param partPatch The partial data of Part which is supposed to be updated; value cannot be null.
     * @return The updated Part.
     * @throws EntityNotFoundException if no Part is found with given input.
     */
    Part partialUpdate(Integer partId, Map<String, Object> partPatch);

    /**
     * Deletes an existing Part with the given id.
     *
     * @param partId The id of the Part to be deleted; value cannot be null.
     * @return The deleted Part.
     * @throws EntityNotFoundException if no Part found with the given id.
     */
    Part delete(Integer partId);

    /**
     * Deletes an existing Part with the given object.
     *
     * @param part The instance of the Part to be deleted; value cannot be null.
     */
    void delete(Part part);

    /**
     * Find all Parts matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Parts.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Part> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Parts matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Parts.
     *
     * @see Pageable
     * @see Page
     */
    Page<Part> findAll(String query, Pageable pageable);

    /**
     * Exports all Parts matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Parts matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Parts in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Part.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated partSales for given Part id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated PartSale instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<PartSale> findAssociatedPartSales(Integer id, Pageable pageable);

}
