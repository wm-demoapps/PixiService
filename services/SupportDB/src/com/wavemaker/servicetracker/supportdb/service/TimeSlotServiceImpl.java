/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.EngineerAppointment;
import com.wavemaker.servicetracker.supportdb.TimeSlot;


/**
 * ServiceImpl object for domain model class TimeSlot.
 *
 * @see TimeSlot
 */
@Service("SupportDB.TimeSlotService")
@Validated
@EntityService(entityClass = TimeSlot.class, serviceId = "SupportDB")
public class TimeSlotServiceImpl implements TimeSlotService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TimeSlotServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SupportDB.EngineerAppointmentService")
    private EngineerAppointmentService engineerAppointmentService;

    @Autowired
    @Qualifier("SupportDB.TimeSlotDao")
    private WMGenericDao<TimeSlot, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TimeSlot, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public TimeSlot create(TimeSlot timeSlot) {
        LOGGER.debug("Creating a new TimeSlot with information: {}", timeSlot);

        TimeSlot timeSlotCreated = this.wmGenericDao.create(timeSlot);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(timeSlotCreated);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public TimeSlot getById(Integer timeslotId) {
        LOGGER.debug("Finding TimeSlot by id: {}", timeslotId);
        return this.wmGenericDao.findById(timeslotId);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public TimeSlot findById(Integer timeslotId) {
        LOGGER.debug("Finding TimeSlot by id: {}", timeslotId);
        try {
            return this.wmGenericDao.findById(timeslotId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TimeSlot found with id: {}", timeslotId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public List<TimeSlot> findByMultipleIds(List<Integer> timeslotIds, boolean orderedReturn) {
        LOGGER.debug("Finding TimeSlots by ids: {}", timeslotIds);

        return this.wmGenericDao.findByMultipleIds(timeslotIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SupportDBTransactionManager")
    @Override
    public TimeSlot update(TimeSlot timeSlot) {
        LOGGER.debug("Updating TimeSlot with information: {}", timeSlot);

        this.wmGenericDao.update(timeSlot);
        this.wmGenericDao.refresh(timeSlot);

        return timeSlot;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public TimeSlot partialUpdate(Integer timeslotId, Map<String, Object>timeSlotPatch) {
        LOGGER.debug("Partially Updating the TimeSlot with id: {}", timeslotId);

        TimeSlot timeSlot = getById(timeslotId);

        try {
            ObjectReader timeSlotReader = this.objectMapper.reader().forType(TimeSlot.class).withValueToUpdate(timeSlot);
            timeSlot = timeSlotReader.readValue(this.objectMapper.writeValueAsString(timeSlotPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", timeSlotPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        timeSlot = update(timeSlot);

        return timeSlot;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public TimeSlot delete(Integer timeslotId) {
        LOGGER.debug("Deleting TimeSlot with id: {}", timeslotId);
        TimeSlot deleted = this.wmGenericDao.findById(timeslotId);
        if (deleted == null) {
            LOGGER.debug("No TimeSlot found with id: {}", timeslotId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TimeSlot.class.getSimpleName(), timeslotId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public void delete(TimeSlot timeSlot) {
        LOGGER.debug("Deleting TimeSlot with {}", timeSlot);
        this.wmGenericDao.delete(timeSlot);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<TimeSlot> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TimeSlots");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<TimeSlot> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TimeSlots");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SupportDB for table TimeSlot to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SupportDB for table TimeSlot to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<EngineerAppointment> findAssociatedEngineerAppointments(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated engineerAppointments");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("timeSlot.id = '" + id + "'");

        return engineerAppointmentService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service EngineerAppointmentService instance
     */
    protected void setEngineerAppointmentService(EngineerAppointmentService service) {
        this.engineerAppointmentService = service;
    }

}
