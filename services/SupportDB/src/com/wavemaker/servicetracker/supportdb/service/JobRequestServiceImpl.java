/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.JobRequest;
import com.wavemaker.servicetracker.supportdb.Rma;


/**
 * ServiceImpl object for domain model class JobRequest.
 *
 * @see JobRequest
 */
@Service("SupportDB.JobRequestService")
@Validated
@EntityService(entityClass = JobRequest.class, serviceId = "SupportDB")
public class JobRequestServiceImpl implements JobRequestService {

    private static final Logger LOGGER = LoggerFactory.getLogger(JobRequestServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SupportDB.RmaService")
    private RmaService rmaService;

    @Autowired
    @Qualifier("SupportDB.JobRequestDao")
    private WMGenericDao<JobRequest, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<JobRequest, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public JobRequest create(JobRequest jobRequest) {
        LOGGER.debug("Creating a new JobRequest with information: {}", jobRequest);

        JobRequest jobRequestCreated = this.wmGenericDao.create(jobRequest);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(jobRequestCreated);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public JobRequest getById(Integer jobrequestId) {
        LOGGER.debug("Finding JobRequest by id: {}", jobrequestId);
        return this.wmGenericDao.findById(jobrequestId);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public JobRequest findById(Integer jobrequestId) {
        LOGGER.debug("Finding JobRequest by id: {}", jobrequestId);
        try {
            return this.wmGenericDao.findById(jobrequestId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No JobRequest found with id: {}", jobrequestId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public List<JobRequest> findByMultipleIds(List<Integer> jobrequestIds, boolean orderedReturn) {
        LOGGER.debug("Finding JobRequests by ids: {}", jobrequestIds);

        return this.wmGenericDao.findByMultipleIds(jobrequestIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SupportDBTransactionManager")
    @Override
    public JobRequest update(JobRequest jobRequest) {
        LOGGER.debug("Updating JobRequest with information: {}", jobRequest);

        this.wmGenericDao.update(jobRequest);
        this.wmGenericDao.refresh(jobRequest);

        return jobRequest;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public JobRequest partialUpdate(Integer jobrequestId, Map<String, Object>jobRequestPatch) {
        LOGGER.debug("Partially Updating the JobRequest with id: {}", jobrequestId);

        JobRequest jobRequest = getById(jobrequestId);

        try {
            ObjectReader jobRequestReader = this.objectMapper.reader().forType(JobRequest.class).withValueToUpdate(jobRequest);
            jobRequest = jobRequestReader.readValue(this.objectMapper.writeValueAsString(jobRequestPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", jobRequestPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        jobRequest = update(jobRequest);

        return jobRequest;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public JobRequest delete(Integer jobrequestId) {
        LOGGER.debug("Deleting JobRequest with id: {}", jobrequestId);
        JobRequest deleted = this.wmGenericDao.findById(jobrequestId);
        if (deleted == null) {
            LOGGER.debug("No JobRequest found with id: {}", jobrequestId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), JobRequest.class.getSimpleName(), jobrequestId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public void delete(JobRequest jobRequest) {
        LOGGER.debug("Deleting JobRequest with {}", jobRequest);
        this.wmGenericDao.delete(jobRequest);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<JobRequest> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all JobRequests");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<JobRequest> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all JobRequests");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SupportDB for table JobRequest to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SupportDB for table JobRequest to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Rma> findAssociatedRmas(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated rmas");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("jobRequest.id = '" + id + "'");

        return rmaService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service RmaService instance
     */
    protected void setRmaService(RmaService service) {
        this.rmaService = service;
    }

}
