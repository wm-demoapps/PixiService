/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.UserLogin;
import com.wavemaker.servicetracker.supportdb.UserRole;

/**
 * Service object for domain model class {@link UserRole}.
 */
public interface UserRoleService {

    /**
     * Creates a new UserRole. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserRole if any.
     *
     * @param userRole Details of the UserRole to be created; value cannot be null.
     * @return The newly created UserRole.
     */
    UserRole create(@Valid UserRole userRole);


	/**
     * Returns UserRole by given id if exists.
     *
     * @param userroleId The id of the UserRole to get; value cannot be null.
     * @return UserRole associated with the given userroleId.
	 * @throws EntityNotFoundException If no UserRole is found.
     */
    UserRole getById(Integer userroleId);

    /**
     * Find and return the UserRole by given id if exists, returns null otherwise.
     *
     * @param userroleId The id of the UserRole to get; value cannot be null.
     * @return UserRole associated with the given userroleId.
     */
    UserRole findById(Integer userroleId);

	/**
     * Find and return the list of UserRoles by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param userroleIds The id's of the UserRole to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return UserRoles associated with the given userroleIds.
     */
    List<UserRole> findByMultipleIds(List<Integer> userroleIds, boolean orderedReturn);


    /**
     * Updates the details of an existing UserRole. It replaces all fields of the existing UserRole with the given userRole.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserRole if any.
     *
     * @param userRole The details of the UserRole to be updated; value cannot be null.
     * @return The updated UserRole.
     * @throws EntityNotFoundException if no UserRole is found with given input.
     */
    UserRole update(@Valid UserRole userRole);


    /**
     * Partially updates the details of an existing UserRole. It updates only the
     * fields of the existing UserRole which are passed in the userRolePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserRole if any.
     *
     * @param userroleId The id of the UserRole to be deleted; value cannot be null.
     * @param userRolePatch The partial data of UserRole which is supposed to be updated; value cannot be null.
     * @return The updated UserRole.
     * @throws EntityNotFoundException if no UserRole is found with given input.
     */
    UserRole partialUpdate(Integer userroleId, Map<String, Object> userRolePatch);

    /**
     * Deletes an existing UserRole with the given id.
     *
     * @param userroleId The id of the UserRole to be deleted; value cannot be null.
     * @return The deleted UserRole.
     * @throws EntityNotFoundException if no UserRole found with the given id.
     */
    UserRole delete(Integer userroleId);

    /**
     * Deletes an existing UserRole with the given object.
     *
     * @param userRole The instance of the UserRole to be deleted; value cannot be null.
     */
    void delete(UserRole userRole);

    /**
     * Find all UserRoles matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserRoles.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<UserRole> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all UserRoles matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserRoles.
     *
     * @see Pageable
     * @see Page
     */
    Page<UserRole> findAll(String query, Pageable pageable);

    /**
     * Exports all UserRoles matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all UserRoles matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the UserRoles in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the UserRole.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated userLogins for given UserRole id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated UserLogin instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<UserLogin> findAssociatedUserLogins(Integer id, Pageable pageable);

}
