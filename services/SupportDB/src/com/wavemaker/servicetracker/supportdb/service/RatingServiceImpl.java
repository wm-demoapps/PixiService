/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.CustomerSatisfaction;
import com.wavemaker.servicetracker.supportdb.Rating;


/**
 * ServiceImpl object for domain model class Rating.
 *
 * @see Rating
 */
@Service("SupportDB.RatingService")
@Validated
@EntityService(entityClass = Rating.class, serviceId = "SupportDB")
public class RatingServiceImpl implements RatingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RatingServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SupportDB.CustomerSatisfactionService")
    private CustomerSatisfactionService customerSatisfactionService;

    @Autowired
    @Qualifier("SupportDB.RatingDao")
    private WMGenericDao<Rating, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Rating, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public Rating create(Rating ratingInstance) {
        LOGGER.debug("Creating a new Rating with information: {}", ratingInstance);

        Rating ratingInstanceCreated = this.wmGenericDao.create(ratingInstance);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(ratingInstanceCreated);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Rating getById(Integer ratingId) {
        LOGGER.debug("Finding Rating by id: {}", ratingId);
        return this.wmGenericDao.findById(ratingId);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Rating findById(Integer ratingId) {
        LOGGER.debug("Finding Rating by id: {}", ratingId);
        try {
            return this.wmGenericDao.findById(ratingId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Rating found with id: {}", ratingId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public List<Rating> findByMultipleIds(List<Integer> ratingIds, boolean orderedReturn) {
        LOGGER.debug("Finding Ratings by ids: {}", ratingIds);

        return this.wmGenericDao.findByMultipleIds(ratingIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SupportDBTransactionManager")
    @Override
    public Rating update(Rating ratingInstance) {
        LOGGER.debug("Updating Rating with information: {}", ratingInstance);

        this.wmGenericDao.update(ratingInstance);
        this.wmGenericDao.refresh(ratingInstance);

        return ratingInstance;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public Rating partialUpdate(Integer ratingId, Map<String, Object>ratingInstancePatch) {
        LOGGER.debug("Partially Updating the Rating with id: {}", ratingId);

        Rating ratingInstance = getById(ratingId);

        try {
            ObjectReader ratingInstanceReader = this.objectMapper.reader().forType(Rating.class).withValueToUpdate(ratingInstance);
            ratingInstance = ratingInstanceReader.readValue(this.objectMapper.writeValueAsString(ratingInstancePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", ratingInstancePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        ratingInstance = update(ratingInstance);

        return ratingInstance;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public Rating delete(Integer ratingId) {
        LOGGER.debug("Deleting Rating with id: {}", ratingId);
        Rating deleted = this.wmGenericDao.findById(ratingId);
        if (deleted == null) {
            LOGGER.debug("No Rating found with id: {}", ratingId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Rating.class.getSimpleName(), ratingId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public void delete(Rating ratingInstance) {
        LOGGER.debug("Deleting Rating with {}", ratingInstance);
        this.wmGenericDao.delete(ratingInstance);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Rating> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Ratings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Rating> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Ratings");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SupportDB for table Rating to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SupportDB for table Rating to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<CustomerSatisfaction> findAssociatedCustomerSatisfactions(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated customerSatisfactions");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("rating.id = '" + id + "'");

        return customerSatisfactionService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service CustomerSatisfactionService instance
     */
    protected void setCustomerSatisfactionService(CustomerSatisfactionService service) {
        this.customerSatisfactionService = service;
    }

}
