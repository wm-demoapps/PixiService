/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.PartSale;
import com.wavemaker.servicetracker.supportdb.PaymentType;
import com.wavemaker.servicetracker.supportdb.Rma;


/**
 * ServiceImpl object for domain model class PaymentType.
 *
 * @see PaymentType
 */
@Service("SupportDB.PaymentTypeService")
@Validated
@EntityService(entityClass = PaymentType.class, serviceId = "SupportDB")
public class PaymentTypeServiceImpl implements PaymentTypeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PaymentTypeServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SupportDB.RmaService")
    private RmaService rmaService;

    @Lazy
    @Autowired
    @Qualifier("SupportDB.PartSaleService")
    private PartSaleService partSaleService;

    @Autowired
    @Qualifier("SupportDB.PaymentTypeDao")
    private WMGenericDao<PaymentType, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<PaymentType, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public PaymentType create(PaymentType paymentType) {
        LOGGER.debug("Creating a new PaymentType with information: {}", paymentType);

        PaymentType paymentTypeCreated = this.wmGenericDao.create(paymentType);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(paymentTypeCreated);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public PaymentType getById(Integer paymenttypeId) {
        LOGGER.debug("Finding PaymentType by id: {}", paymenttypeId);
        return this.wmGenericDao.findById(paymenttypeId);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public PaymentType findById(Integer paymenttypeId) {
        LOGGER.debug("Finding PaymentType by id: {}", paymenttypeId);
        try {
            return this.wmGenericDao.findById(paymenttypeId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No PaymentType found with id: {}", paymenttypeId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public List<PaymentType> findByMultipleIds(List<Integer> paymenttypeIds, boolean orderedReturn) {
        LOGGER.debug("Finding PaymentTypes by ids: {}", paymenttypeIds);

        return this.wmGenericDao.findByMultipleIds(paymenttypeIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SupportDBTransactionManager")
    @Override
    public PaymentType update(PaymentType paymentType) {
        LOGGER.debug("Updating PaymentType with information: {}", paymentType);

        this.wmGenericDao.update(paymentType);
        this.wmGenericDao.refresh(paymentType);

        return paymentType;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public PaymentType partialUpdate(Integer paymenttypeId, Map<String, Object>paymentTypePatch) {
        LOGGER.debug("Partially Updating the PaymentType with id: {}", paymenttypeId);

        PaymentType paymentType = getById(paymenttypeId);

        try {
            ObjectReader paymentTypeReader = this.objectMapper.reader().forType(PaymentType.class).withValueToUpdate(paymentType);
            paymentType = paymentTypeReader.readValue(this.objectMapper.writeValueAsString(paymentTypePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", paymentTypePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        paymentType = update(paymentType);

        return paymentType;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public PaymentType delete(Integer paymenttypeId) {
        LOGGER.debug("Deleting PaymentType with id: {}", paymenttypeId);
        PaymentType deleted = this.wmGenericDao.findById(paymenttypeId);
        if (deleted == null) {
            LOGGER.debug("No PaymentType found with id: {}", paymenttypeId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), PaymentType.class.getSimpleName(), paymenttypeId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public void delete(PaymentType paymentType) {
        LOGGER.debug("Deleting PaymentType with {}", paymentType);
        this.wmGenericDao.delete(paymentType);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<PaymentType> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PaymentTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<PaymentType> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PaymentTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SupportDB for table PaymentType to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SupportDB for table PaymentType to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<PartSale> findAssociatedPartSales(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated partSales");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("paymentType.id = '" + id + "'");

        return partSaleService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Rma> findAssociatedRmas(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated rmas");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("paymentType.id = '" + id + "'");

        return rmaService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service RmaService instance
     */
    protected void setRmaService(RmaService service) {
        this.rmaService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service PartSaleService instance
     */
    protected void setPartSaleService(PartSaleService service) {
        this.partSaleService = service;
    }

}
