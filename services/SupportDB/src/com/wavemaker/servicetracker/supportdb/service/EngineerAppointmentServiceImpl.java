/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.EngineerAppointment;
import com.wavemaker.servicetracker.supportdb.Rma;


/**
 * ServiceImpl object for domain model class EngineerAppointment.
 *
 * @see EngineerAppointment
 */
@Service("SupportDB.EngineerAppointmentService")
@Validated
@EntityService(entityClass = EngineerAppointment.class, serviceId = "SupportDB")
public class EngineerAppointmentServiceImpl implements EngineerAppointmentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EngineerAppointmentServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SupportDB.RmaService")
    private RmaService rmaService;

    @Autowired
    @Qualifier("SupportDB.EngineerAppointmentDao")
    private WMGenericDao<EngineerAppointment, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<EngineerAppointment, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public EngineerAppointment create(EngineerAppointment engineerAppointment) {
        LOGGER.debug("Creating a new EngineerAppointment with information: {}", engineerAppointment);

        EngineerAppointment engineerAppointmentCreated = this.wmGenericDao.create(engineerAppointment);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(engineerAppointmentCreated);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public EngineerAppointment getById(Integer engineerappointmentId) {
        LOGGER.debug("Finding EngineerAppointment by id: {}", engineerappointmentId);
        return this.wmGenericDao.findById(engineerappointmentId);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public EngineerAppointment findById(Integer engineerappointmentId) {
        LOGGER.debug("Finding EngineerAppointment by id: {}", engineerappointmentId);
        try {
            return this.wmGenericDao.findById(engineerappointmentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No EngineerAppointment found with id: {}", engineerappointmentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public List<EngineerAppointment> findByMultipleIds(List<Integer> engineerappointmentIds, boolean orderedReturn) {
        LOGGER.debug("Finding EngineerAppointments by ids: {}", engineerappointmentIds);

        return this.wmGenericDao.findByMultipleIds(engineerappointmentIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SupportDBTransactionManager")
    @Override
    public EngineerAppointment update(EngineerAppointment engineerAppointment) {
        LOGGER.debug("Updating EngineerAppointment with information: {}", engineerAppointment);

        this.wmGenericDao.update(engineerAppointment);
        this.wmGenericDao.refresh(engineerAppointment);

        return engineerAppointment;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public EngineerAppointment partialUpdate(Integer engineerappointmentId, Map<String, Object>engineerAppointmentPatch) {
        LOGGER.debug("Partially Updating the EngineerAppointment with id: {}", engineerappointmentId);

        EngineerAppointment engineerAppointment = getById(engineerappointmentId);

        try {
            ObjectReader engineerAppointmentReader = this.objectMapper.reader().forType(EngineerAppointment.class).withValueToUpdate(engineerAppointment);
            engineerAppointment = engineerAppointmentReader.readValue(this.objectMapper.writeValueAsString(engineerAppointmentPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", engineerAppointmentPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        engineerAppointment = update(engineerAppointment);

        return engineerAppointment;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public EngineerAppointment delete(Integer engineerappointmentId) {
        LOGGER.debug("Deleting EngineerAppointment with id: {}", engineerappointmentId);
        EngineerAppointment deleted = this.wmGenericDao.findById(engineerappointmentId);
        if (deleted == null) {
            LOGGER.debug("No EngineerAppointment found with id: {}", engineerappointmentId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), EngineerAppointment.class.getSimpleName(), engineerappointmentId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public void delete(EngineerAppointment engineerAppointment) {
        LOGGER.debug("Deleting EngineerAppointment with {}", engineerAppointment);
        this.wmGenericDao.delete(engineerAppointment);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<EngineerAppointment> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EngineerAppointments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<EngineerAppointment> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EngineerAppointments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SupportDB for table EngineerAppointment to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SupportDB for table EngineerAppointment to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Rma> findAssociatedRmas(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated rmas");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("engineerAppointment.id = '" + id + "'");

        return rmaService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service RmaService instance
     */
    protected void setRmaService(RmaService service) {
        this.rmaService = service;
    }

}
