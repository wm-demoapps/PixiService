/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.Rma;
import com.wavemaker.servicetracker.supportdb.ServiceArea;

/**
 * Service object for domain model class {@link ServiceArea}.
 */
public interface ServiceAreaService {

    /**
     * Creates a new ServiceArea. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ServiceArea if any.
     *
     * @param serviceArea Details of the ServiceArea to be created; value cannot be null.
     * @return The newly created ServiceArea.
     */
    ServiceArea create(@Valid ServiceArea serviceArea);


	/**
     * Returns ServiceArea by given id if exists.
     *
     * @param serviceareaId The id of the ServiceArea to get; value cannot be null.
     * @return ServiceArea associated with the given serviceareaId.
	 * @throws EntityNotFoundException If no ServiceArea is found.
     */
    ServiceArea getById(Integer serviceareaId);

    /**
     * Find and return the ServiceArea by given id if exists, returns null otherwise.
     *
     * @param serviceareaId The id of the ServiceArea to get; value cannot be null.
     * @return ServiceArea associated with the given serviceareaId.
     */
    ServiceArea findById(Integer serviceareaId);

	/**
     * Find and return the list of ServiceAreas by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param serviceareaIds The id's of the ServiceArea to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return ServiceAreas associated with the given serviceareaIds.
     */
    List<ServiceArea> findByMultipleIds(List<Integer> serviceareaIds, boolean orderedReturn);


    /**
     * Updates the details of an existing ServiceArea. It replaces all fields of the existing ServiceArea with the given serviceArea.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ServiceArea if any.
     *
     * @param serviceArea The details of the ServiceArea to be updated; value cannot be null.
     * @return The updated ServiceArea.
     * @throws EntityNotFoundException if no ServiceArea is found with given input.
     */
    ServiceArea update(@Valid ServiceArea serviceArea);


    /**
     * Partially updates the details of an existing ServiceArea. It updates only the
     * fields of the existing ServiceArea which are passed in the serviceAreaPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ServiceArea if any.
     *
     * @param serviceareaId The id of the ServiceArea to be deleted; value cannot be null.
     * @param serviceAreaPatch The partial data of ServiceArea which is supposed to be updated; value cannot be null.
     * @return The updated ServiceArea.
     * @throws EntityNotFoundException if no ServiceArea is found with given input.
     */
    ServiceArea partialUpdate(Integer serviceareaId, Map<String, Object> serviceAreaPatch);

    /**
     * Deletes an existing ServiceArea with the given id.
     *
     * @param serviceareaId The id of the ServiceArea to be deleted; value cannot be null.
     * @return The deleted ServiceArea.
     * @throws EntityNotFoundException if no ServiceArea found with the given id.
     */
    ServiceArea delete(Integer serviceareaId);

    /**
     * Deletes an existing ServiceArea with the given object.
     *
     * @param serviceArea The instance of the ServiceArea to be deleted; value cannot be null.
     */
    void delete(ServiceArea serviceArea);

    /**
     * Find all ServiceAreas matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ServiceAreas.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<ServiceArea> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all ServiceAreas matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ServiceAreas.
     *
     * @see Pageable
     * @see Page
     */
    Page<ServiceArea> findAll(String query, Pageable pageable);

    /**
     * Exports all ServiceAreas matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all ServiceAreas matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the ServiceAreas in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the ServiceArea.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated rmas for given ServiceArea id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Rma instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Rma> findAssociatedRmas(Integer id, Pageable pageable);

}
