/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.Part;
import com.wavemaker.servicetracker.supportdb.PartMaterial;

/**
 * Service object for domain model class {@link PartMaterial}.
 */
public interface PartMaterialService {

    /**
     * Creates a new PartMaterial. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PartMaterial if any.
     *
     * @param partMaterial Details of the PartMaterial to be created; value cannot be null.
     * @return The newly created PartMaterial.
     */
    PartMaterial create(@Valid PartMaterial partMaterial);


	/**
     * Returns PartMaterial by given id if exists.
     *
     * @param partmaterialId The id of the PartMaterial to get; value cannot be null.
     * @return PartMaterial associated with the given partmaterialId.
	 * @throws EntityNotFoundException If no PartMaterial is found.
     */
    PartMaterial getById(Integer partmaterialId);

    /**
     * Find and return the PartMaterial by given id if exists, returns null otherwise.
     *
     * @param partmaterialId The id of the PartMaterial to get; value cannot be null.
     * @return PartMaterial associated with the given partmaterialId.
     */
    PartMaterial findById(Integer partmaterialId);

	/**
     * Find and return the list of PartMaterials by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param partmaterialIds The id's of the PartMaterial to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return PartMaterials associated with the given partmaterialIds.
     */
    List<PartMaterial> findByMultipleIds(List<Integer> partmaterialIds, boolean orderedReturn);


    /**
     * Updates the details of an existing PartMaterial. It replaces all fields of the existing PartMaterial with the given partMaterial.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PartMaterial if any.
     *
     * @param partMaterial The details of the PartMaterial to be updated; value cannot be null.
     * @return The updated PartMaterial.
     * @throws EntityNotFoundException if no PartMaterial is found with given input.
     */
    PartMaterial update(@Valid PartMaterial partMaterial);


    /**
     * Partially updates the details of an existing PartMaterial. It updates only the
     * fields of the existing PartMaterial which are passed in the partMaterialPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PartMaterial if any.
     *
     * @param partmaterialId The id of the PartMaterial to be deleted; value cannot be null.
     * @param partMaterialPatch The partial data of PartMaterial which is supposed to be updated; value cannot be null.
     * @return The updated PartMaterial.
     * @throws EntityNotFoundException if no PartMaterial is found with given input.
     */
    PartMaterial partialUpdate(Integer partmaterialId, Map<String, Object> partMaterialPatch);

    /**
     * Deletes an existing PartMaterial with the given id.
     *
     * @param partmaterialId The id of the PartMaterial to be deleted; value cannot be null.
     * @return The deleted PartMaterial.
     * @throws EntityNotFoundException if no PartMaterial found with the given id.
     */
    PartMaterial delete(Integer partmaterialId);

    /**
     * Deletes an existing PartMaterial with the given object.
     *
     * @param partMaterial The instance of the PartMaterial to be deleted; value cannot be null.
     */
    void delete(PartMaterial partMaterial);

    /**
     * Find all PartMaterials matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PartMaterials.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<PartMaterial> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all PartMaterials matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PartMaterials.
     *
     * @see Pageable
     * @see Page
     */
    Page<PartMaterial> findAll(String query, Pageable pageable);

    /**
     * Exports all PartMaterials matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all PartMaterials matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the PartMaterials in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the PartMaterial.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated parts for given PartMaterial id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Part instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Part> findAssociatedParts(Integer id, Pageable pageable);

}
