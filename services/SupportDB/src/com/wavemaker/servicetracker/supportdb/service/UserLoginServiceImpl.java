/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.Engineer;
import com.wavemaker.servicetracker.supportdb.UserLogin;


/**
 * ServiceImpl object for domain model class UserLogin.
 *
 * @see UserLogin
 */
@Service("SupportDB.UserLoginService")
@Validated
@EntityService(entityClass = UserLogin.class, serviceId = "SupportDB")
public class UserLoginServiceImpl implements UserLoginService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserLoginServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SupportDB.EngineerService")
    private EngineerService engineerService;

    @Autowired
    @Qualifier("SupportDB.UserLoginDao")
    private WMGenericDao<UserLogin, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<UserLogin, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public UserLogin create(UserLogin userLogin) {
        LOGGER.debug("Creating a new UserLogin with information: {}", userLogin);

        UserLogin userLoginCreated = this.wmGenericDao.create(userLogin);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(userLoginCreated);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public UserLogin getById(Integer userloginId) {
        LOGGER.debug("Finding UserLogin by id: {}", userloginId);
        return this.wmGenericDao.findById(userloginId);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public UserLogin findById(Integer userloginId) {
        LOGGER.debug("Finding UserLogin by id: {}", userloginId);
        try {
            return this.wmGenericDao.findById(userloginId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No UserLogin found with id: {}", userloginId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public List<UserLogin> findByMultipleIds(List<Integer> userloginIds, boolean orderedReturn) {
        LOGGER.debug("Finding UserLogins by ids: {}", userloginIds);

        return this.wmGenericDao.findByMultipleIds(userloginIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SupportDBTransactionManager")
    @Override
    public UserLogin update(UserLogin userLogin) {
        LOGGER.debug("Updating UserLogin with information: {}", userLogin);

        this.wmGenericDao.update(userLogin);
        this.wmGenericDao.refresh(userLogin);

        return userLogin;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public UserLogin partialUpdate(Integer userloginId, Map<String, Object>userLoginPatch) {
        LOGGER.debug("Partially Updating the UserLogin with id: {}", userloginId);

        UserLogin userLogin = getById(userloginId);

        try {
            ObjectReader userLoginReader = this.objectMapper.reader().forType(UserLogin.class).withValueToUpdate(userLogin);
            userLogin = userLoginReader.readValue(this.objectMapper.writeValueAsString(userLoginPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", userLoginPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        userLogin = update(userLogin);

        return userLogin;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public UserLogin delete(Integer userloginId) {
        LOGGER.debug("Deleting UserLogin with id: {}", userloginId);
        UserLogin deleted = this.wmGenericDao.findById(userloginId);
        if (deleted == null) {
            LOGGER.debug("No UserLogin found with id: {}", userloginId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), UserLogin.class.getSimpleName(), userloginId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public void delete(UserLogin userLogin) {
        LOGGER.debug("Deleting UserLogin with {}", userLogin);
        this.wmGenericDao.delete(userLogin);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<UserLogin> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UserLogins");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<UserLogin> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UserLogins");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SupportDB for table UserLogin to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SupportDB for table UserLogin to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Engineer> findAssociatedEngineers(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated engineers");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("userLogin.id = '" + id + "'");

        return engineerService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service EngineerService instance
     */
    protected void setEngineerService(EngineerService service) {
        this.engineerService = service;
    }

}
