/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.Engineer;
import com.wavemaker.servicetracker.supportdb.EngineerAppointment;


/**
 * ServiceImpl object for domain model class Engineer.
 *
 * @see Engineer
 */
@Service("SupportDB.EngineerService")
@Validated
@EntityService(entityClass = Engineer.class, serviceId = "SupportDB")
public class EngineerServiceImpl implements EngineerService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EngineerServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SupportDB.EngineerAppointmentService")
    private EngineerAppointmentService engineerAppointmentService;

    @Autowired
    @Qualifier("SupportDB.EngineerDao")
    private WMGenericDao<Engineer, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Engineer, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public Engineer create(Engineer engineer) {
        LOGGER.debug("Creating a new Engineer with information: {}", engineer);

        Engineer engineerCreated = this.wmGenericDao.create(engineer);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(engineerCreated);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Engineer getById(Integer engineerIdInstance) {
        LOGGER.debug("Finding Engineer by id: {}", engineerIdInstance);
        return this.wmGenericDao.findById(engineerIdInstance);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Engineer findById(Integer engineerIdInstance) {
        LOGGER.debug("Finding Engineer by id: {}", engineerIdInstance);
        try {
            return this.wmGenericDao.findById(engineerIdInstance);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Engineer found with id: {}", engineerIdInstance, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public List<Engineer> findByMultipleIds(List<Integer> engineerIdInstances, boolean orderedReturn) {
        LOGGER.debug("Finding Engineers by ids: {}", engineerIdInstances);

        return this.wmGenericDao.findByMultipleIds(engineerIdInstances, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SupportDBTransactionManager")
    @Override
    public Engineer update(Engineer engineer) {
        LOGGER.debug("Updating Engineer with information: {}", engineer);

        this.wmGenericDao.update(engineer);
        this.wmGenericDao.refresh(engineer);

        return engineer;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public Engineer partialUpdate(Integer engineerIdInstance, Map<String, Object>engineerPatch) {
        LOGGER.debug("Partially Updating the Engineer with id: {}", engineerIdInstance);

        Engineer engineer = getById(engineerIdInstance);

        try {
            ObjectReader engineerReader = this.objectMapper.reader().forType(Engineer.class).withValueToUpdate(engineer);
            engineer = engineerReader.readValue(this.objectMapper.writeValueAsString(engineerPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", engineerPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        engineer = update(engineer);

        return engineer;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public Engineer delete(Integer engineerIdInstance) {
        LOGGER.debug("Deleting Engineer with id: {}", engineerIdInstance);
        Engineer deleted = this.wmGenericDao.findById(engineerIdInstance);
        if (deleted == null) {
            LOGGER.debug("No Engineer found with id: {}", engineerIdInstance);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Engineer.class.getSimpleName(), engineerIdInstance);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public void delete(Engineer engineer) {
        LOGGER.debug("Deleting Engineer with {}", engineer);
        this.wmGenericDao.delete(engineer);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Engineer> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Engineers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Engineer> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Engineers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SupportDB for table Engineer to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SupportDB for table Engineer to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<EngineerAppointment> findAssociatedEngineerAppointments(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated engineerAppointments");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("engineer.id = '" + id + "'");

        return engineerAppointmentService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service EngineerAppointmentService instance
     */
    protected void setEngineerAppointmentService(EngineerAppointmentService service) {
        this.engineerAppointmentService = service;
    }

}
