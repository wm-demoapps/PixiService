/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.PartSale;
import com.wavemaker.servicetracker.supportdb.RepairActivity;

/**
 * Service object for domain model class {@link RepairActivity}.
 */
public interface RepairActivityService {

    /**
     * Creates a new RepairActivity. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RepairActivity if any.
     *
     * @param repairActivity Details of the RepairActivity to be created; value cannot be null.
     * @return The newly created RepairActivity.
     */
    RepairActivity create(@Valid RepairActivity repairActivity);


	/**
     * Returns RepairActivity by given id if exists.
     *
     * @param repairactivityId The id of the RepairActivity to get; value cannot be null.
     * @return RepairActivity associated with the given repairactivityId.
	 * @throws EntityNotFoundException If no RepairActivity is found.
     */
    RepairActivity getById(Integer repairactivityId);

    /**
     * Find and return the RepairActivity by given id if exists, returns null otherwise.
     *
     * @param repairactivityId The id of the RepairActivity to get; value cannot be null.
     * @return RepairActivity associated with the given repairactivityId.
     */
    RepairActivity findById(Integer repairactivityId);

	/**
     * Find and return the list of RepairActivities by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param repairactivityIds The id's of the RepairActivity to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return RepairActivities associated with the given repairactivityIds.
     */
    List<RepairActivity> findByMultipleIds(List<Integer> repairactivityIds, boolean orderedReturn);


    /**
     * Updates the details of an existing RepairActivity. It replaces all fields of the existing RepairActivity with the given repairActivity.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RepairActivity if any.
     *
     * @param repairActivity The details of the RepairActivity to be updated; value cannot be null.
     * @return The updated RepairActivity.
     * @throws EntityNotFoundException if no RepairActivity is found with given input.
     */
    RepairActivity update(@Valid RepairActivity repairActivity);


    /**
     * Partially updates the details of an existing RepairActivity. It updates only the
     * fields of the existing RepairActivity which are passed in the repairActivityPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RepairActivity if any.
     *
     * @param repairactivityId The id of the RepairActivity to be deleted; value cannot be null.
     * @param repairActivityPatch The partial data of RepairActivity which is supposed to be updated; value cannot be null.
     * @return The updated RepairActivity.
     * @throws EntityNotFoundException if no RepairActivity is found with given input.
     */
    RepairActivity partialUpdate(Integer repairactivityId, Map<String, Object> repairActivityPatch);

    /**
     * Deletes an existing RepairActivity with the given id.
     *
     * @param repairactivityId The id of the RepairActivity to be deleted; value cannot be null.
     * @return The deleted RepairActivity.
     * @throws EntityNotFoundException if no RepairActivity found with the given id.
     */
    RepairActivity delete(Integer repairactivityId);

    /**
     * Deletes an existing RepairActivity with the given object.
     *
     * @param repairActivity The instance of the RepairActivity to be deleted; value cannot be null.
     */
    void delete(RepairActivity repairActivity);

    /**
     * Find all RepairActivities matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching RepairActivities.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<RepairActivity> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all RepairActivities matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching RepairActivities.
     *
     * @see Pageable
     * @see Page
     */
    Page<RepairActivity> findAll(String query, Pageable pageable);

    /**
     * Exports all RepairActivities matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all RepairActivities matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the RepairActivities in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the RepairActivity.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated partSales for given RepairActivity id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated PartSale instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<PartSale> findAssociatedPartSales(Integer id, Pageable pageable);

}
