/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.Engineer;
import com.wavemaker.servicetracker.supportdb.EngineerAppointment;

/**
 * Service object for domain model class {@link Engineer}.
 */
public interface EngineerService {

    /**
     * Creates a new Engineer. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Engineer if any.
     *
     * @param engineer Details of the Engineer to be created; value cannot be null.
     * @return The newly created Engineer.
     */
    Engineer create(@Valid Engineer engineer);


	/**
     * Returns Engineer by given id if exists.
     *
     * @param engineerIdInstance The id of the Engineer to get; value cannot be null.
     * @return Engineer associated with the given engineerIdInstance.
	 * @throws EntityNotFoundException If no Engineer is found.
     */
    Engineer getById(Integer engineerIdInstance);

    /**
     * Find and return the Engineer by given id if exists, returns null otherwise.
     *
     * @param engineerIdInstance The id of the Engineer to get; value cannot be null.
     * @return Engineer associated with the given engineerIdInstance.
     */
    Engineer findById(Integer engineerIdInstance);

	/**
     * Find and return the list of Engineers by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param engineerIdInstances The id's of the Engineer to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Engineers associated with the given engineerIdInstances.
     */
    List<Engineer> findByMultipleIds(List<Integer> engineerIdInstances, boolean orderedReturn);


    /**
     * Updates the details of an existing Engineer. It replaces all fields of the existing Engineer with the given engineer.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Engineer if any.
     *
     * @param engineer The details of the Engineer to be updated; value cannot be null.
     * @return The updated Engineer.
     * @throws EntityNotFoundException if no Engineer is found with given input.
     */
    Engineer update(@Valid Engineer engineer);


    /**
     * Partially updates the details of an existing Engineer. It updates only the
     * fields of the existing Engineer which are passed in the engineerPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Engineer if any.
     *
     * @param engineerIdInstance The id of the Engineer to be deleted; value cannot be null.
     * @param engineerPatch The partial data of Engineer which is supposed to be updated; value cannot be null.
     * @return The updated Engineer.
     * @throws EntityNotFoundException if no Engineer is found with given input.
     */
    Engineer partialUpdate(Integer engineerIdInstance, Map<String, Object> engineerPatch);

    /**
     * Deletes an existing Engineer with the given id.
     *
     * @param engineerIdInstance The id of the Engineer to be deleted; value cannot be null.
     * @return The deleted Engineer.
     * @throws EntityNotFoundException if no Engineer found with the given id.
     */
    Engineer delete(Integer engineerIdInstance);

    /**
     * Deletes an existing Engineer with the given object.
     *
     * @param engineer The instance of the Engineer to be deleted; value cannot be null.
     */
    void delete(Engineer engineer);

    /**
     * Find all Engineers matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Engineers.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Engineer> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Engineers matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Engineers.
     *
     * @see Pageable
     * @see Page
     */
    Page<Engineer> findAll(String query, Pageable pageable);

    /**
     * Exports all Engineers matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Engineers matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Engineers in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Engineer.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated engineerAppointments for given Engineer id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated EngineerAppointment instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<EngineerAppointment> findAssociatedEngineerAppointments(Integer id, Pageable pageable);

}
