/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;

import com.wavemaker.servicetracker.supportdb.PartSale;
import com.wavemaker.servicetracker.supportdb.RepairActivity;


/**
 * ServiceImpl object for domain model class RepairActivity.
 *
 * @see RepairActivity
 */
@Service("SupportDB.RepairActivityService")
@Validated
@EntityService(entityClass = RepairActivity.class, serviceId = "SupportDB")
public class RepairActivityServiceImpl implements RepairActivityService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RepairActivityServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SupportDB.PartSaleService")
    private PartSaleService partSaleService;

    @Autowired
    @Qualifier("SupportDB.RepairActivityDao")
    private WMGenericDao<RepairActivity, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<RepairActivity, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public RepairActivity create(RepairActivity repairActivity) {
        LOGGER.debug("Creating a new RepairActivity with information: {}", repairActivity);

        RepairActivity repairActivityCreated = this.wmGenericDao.create(repairActivity);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(repairActivityCreated);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public RepairActivity getById(Integer repairactivityId) {
        LOGGER.debug("Finding RepairActivity by id: {}", repairactivityId);
        return this.wmGenericDao.findById(repairactivityId);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public RepairActivity findById(Integer repairactivityId) {
        LOGGER.debug("Finding RepairActivity by id: {}", repairactivityId);
        try {
            return this.wmGenericDao.findById(repairactivityId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No RepairActivity found with id: {}", repairactivityId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public List<RepairActivity> findByMultipleIds(List<Integer> repairactivityIds, boolean orderedReturn) {
        LOGGER.debug("Finding RepairActivities by ids: {}", repairactivityIds);

        return this.wmGenericDao.findByMultipleIds(repairactivityIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SupportDBTransactionManager")
    @Override
    public RepairActivity update(RepairActivity repairActivity) {
        LOGGER.debug("Updating RepairActivity with information: {}", repairActivity);

        List<PartSale> partSales = repairActivity.getPartSales();
        if(partSales != null && Hibernate.isInitialized(partSales)) {
            partSales.forEach(_partSale -> _partSale.setRepairActivity(repairActivity));
        }

        this.wmGenericDao.update(repairActivity);
        this.wmGenericDao.refresh(repairActivity);

        // Deleting children which are not present in the list.
        if(partSales != null && Hibernate.isInitialized(partSales) && !partSales.isEmpty()) {
            List<PartSale> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, PartSale.class,
                        new DaoUtils.ChildrenFilter<>("repairActivity", repairActivity, partSales)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_partSale -> partSaleService.delete(_partSale));
            repairActivity.setPartSales(partSales);
        }

        return repairActivity;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public RepairActivity partialUpdate(Integer repairactivityId, Map<String, Object>repairActivityPatch) {
        LOGGER.debug("Partially Updating the RepairActivity with id: {}", repairactivityId);

        RepairActivity repairActivity = getById(repairactivityId);

        try {
            ObjectReader repairActivityReader = this.objectMapper.reader().forType(RepairActivity.class).withValueToUpdate(repairActivity);
            repairActivity = repairActivityReader.readValue(this.objectMapper.writeValueAsString(repairActivityPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", repairActivityPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        repairActivity = update(repairActivity);

        return repairActivity;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public RepairActivity delete(Integer repairactivityId) {
        LOGGER.debug("Deleting RepairActivity with id: {}", repairactivityId);
        RepairActivity deleted = this.wmGenericDao.findById(repairactivityId);
        if (deleted == null) {
            LOGGER.debug("No RepairActivity found with id: {}", repairactivityId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), RepairActivity.class.getSimpleName(), repairactivityId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public void delete(RepairActivity repairActivity) {
        LOGGER.debug("Deleting RepairActivity with {}", repairActivity);
        this.wmGenericDao.delete(repairActivity);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<RepairActivity> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RepairActivities");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<RepairActivity> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RepairActivities");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SupportDB for table RepairActivity to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SupportDB for table RepairActivity to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<PartSale> findAssociatedPartSales(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated partSales");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("repairActivity.id = '" + id + "'");

        return partSaleService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service PartSaleService instance
     */
    protected void setPartSaleService(PartSaleService service) {
        this.partSaleService = service;
    }

}
