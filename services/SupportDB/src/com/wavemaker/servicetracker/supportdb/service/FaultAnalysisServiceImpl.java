/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.FaultAnalysis;
import com.wavemaker.servicetracker.supportdb.RepairActivity;


/**
 * ServiceImpl object for domain model class FaultAnalysis.
 *
 * @see FaultAnalysis
 */
@Service("SupportDB.FaultAnalysisService")
@Validated
@EntityService(entityClass = FaultAnalysis.class, serviceId = "SupportDB")
public class FaultAnalysisServiceImpl implements FaultAnalysisService {

    private static final Logger LOGGER = LoggerFactory.getLogger(FaultAnalysisServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SupportDB.RepairActivityService")
    private RepairActivityService repairActivityService;

    @Autowired
    @Qualifier("SupportDB.FaultAnalysisDao")
    private WMGenericDao<FaultAnalysis, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<FaultAnalysis, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public FaultAnalysis create(FaultAnalysis faultAnalysis) {
        LOGGER.debug("Creating a new FaultAnalysis with information: {}", faultAnalysis);

        FaultAnalysis faultAnalysisCreated = this.wmGenericDao.create(faultAnalysis);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(faultAnalysisCreated);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public FaultAnalysis getById(Integer faultanalysisId) {
        LOGGER.debug("Finding FaultAnalysis by id: {}", faultanalysisId);
        return this.wmGenericDao.findById(faultanalysisId);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public FaultAnalysis findById(Integer faultanalysisId) {
        LOGGER.debug("Finding FaultAnalysis by id: {}", faultanalysisId);
        try {
            return this.wmGenericDao.findById(faultanalysisId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No FaultAnalysis found with id: {}", faultanalysisId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public List<FaultAnalysis> findByMultipleIds(List<Integer> faultanalysisIds, boolean orderedReturn) {
        LOGGER.debug("Finding FaultAnalyses by ids: {}", faultanalysisIds);

        return this.wmGenericDao.findByMultipleIds(faultanalysisIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SupportDBTransactionManager")
    @Override
    public FaultAnalysis update(FaultAnalysis faultAnalysis) {
        LOGGER.debug("Updating FaultAnalysis with information: {}", faultAnalysis);

        this.wmGenericDao.update(faultAnalysis);
        this.wmGenericDao.refresh(faultAnalysis);

        return faultAnalysis;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public FaultAnalysis partialUpdate(Integer faultanalysisId, Map<String, Object>faultAnalysisPatch) {
        LOGGER.debug("Partially Updating the FaultAnalysis with id: {}", faultanalysisId);

        FaultAnalysis faultAnalysis = getById(faultanalysisId);

        try {
            ObjectReader faultAnalysisReader = this.objectMapper.reader().forType(FaultAnalysis.class).withValueToUpdate(faultAnalysis);
            faultAnalysis = faultAnalysisReader.readValue(this.objectMapper.writeValueAsString(faultAnalysisPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", faultAnalysisPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        faultAnalysis = update(faultAnalysis);

        return faultAnalysis;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public FaultAnalysis delete(Integer faultanalysisId) {
        LOGGER.debug("Deleting FaultAnalysis with id: {}", faultanalysisId);
        FaultAnalysis deleted = this.wmGenericDao.findById(faultanalysisId);
        if (deleted == null) {
            LOGGER.debug("No FaultAnalysis found with id: {}", faultanalysisId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), FaultAnalysis.class.getSimpleName(), faultanalysisId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public void delete(FaultAnalysis faultAnalysis) {
        LOGGER.debug("Deleting FaultAnalysis with {}", faultAnalysis);
        this.wmGenericDao.delete(faultAnalysis);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<FaultAnalysis> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all FaultAnalyses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<FaultAnalysis> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all FaultAnalyses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SupportDB for table FaultAnalysis to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SupportDB for table FaultAnalysis to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<RepairActivity> findAssociatedRepairActivities(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated repairActivities");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("faultAnalysis.id = '" + id + "'");

        return repairActivityService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service RepairActivityService instance
     */
    protected void setRepairActivityService(RepairActivityService service) {
        this.repairActivityService = service;
    }

}
