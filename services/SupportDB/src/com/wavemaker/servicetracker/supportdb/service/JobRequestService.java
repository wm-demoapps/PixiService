/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.JobRequest;
import com.wavemaker.servicetracker.supportdb.Rma;

/**
 * Service object for domain model class {@link JobRequest}.
 */
public interface JobRequestService {

    /**
     * Creates a new JobRequest. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on JobRequest if any.
     *
     * @param jobRequest Details of the JobRequest to be created; value cannot be null.
     * @return The newly created JobRequest.
     */
    JobRequest create(@Valid JobRequest jobRequest);


	/**
     * Returns JobRequest by given id if exists.
     *
     * @param jobrequestId The id of the JobRequest to get; value cannot be null.
     * @return JobRequest associated with the given jobrequestId.
	 * @throws EntityNotFoundException If no JobRequest is found.
     */
    JobRequest getById(Integer jobrequestId);

    /**
     * Find and return the JobRequest by given id if exists, returns null otherwise.
     *
     * @param jobrequestId The id of the JobRequest to get; value cannot be null.
     * @return JobRequest associated with the given jobrequestId.
     */
    JobRequest findById(Integer jobrequestId);

	/**
     * Find and return the list of JobRequests by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param jobrequestIds The id's of the JobRequest to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return JobRequests associated with the given jobrequestIds.
     */
    List<JobRequest> findByMultipleIds(List<Integer> jobrequestIds, boolean orderedReturn);


    /**
     * Updates the details of an existing JobRequest. It replaces all fields of the existing JobRequest with the given jobRequest.
     *
     * This method overrides the input field values using Server side or database managed properties defined on JobRequest if any.
     *
     * @param jobRequest The details of the JobRequest to be updated; value cannot be null.
     * @return The updated JobRequest.
     * @throws EntityNotFoundException if no JobRequest is found with given input.
     */
    JobRequest update(@Valid JobRequest jobRequest);


    /**
     * Partially updates the details of an existing JobRequest. It updates only the
     * fields of the existing JobRequest which are passed in the jobRequestPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on JobRequest if any.
     *
     * @param jobrequestId The id of the JobRequest to be deleted; value cannot be null.
     * @param jobRequestPatch The partial data of JobRequest which is supposed to be updated; value cannot be null.
     * @return The updated JobRequest.
     * @throws EntityNotFoundException if no JobRequest is found with given input.
     */
    JobRequest partialUpdate(Integer jobrequestId, Map<String, Object> jobRequestPatch);

    /**
     * Deletes an existing JobRequest with the given id.
     *
     * @param jobrequestId The id of the JobRequest to be deleted; value cannot be null.
     * @return The deleted JobRequest.
     * @throws EntityNotFoundException if no JobRequest found with the given id.
     */
    JobRequest delete(Integer jobrequestId);

    /**
     * Deletes an existing JobRequest with the given object.
     *
     * @param jobRequest The instance of the JobRequest to be deleted; value cannot be null.
     */
    void delete(JobRequest jobRequest);

    /**
     * Find all JobRequests matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching JobRequests.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<JobRequest> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all JobRequests matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching JobRequests.
     *
     * @see Pageable
     * @see Page
     */
    Page<JobRequest> findAll(String query, Pageable pageable);

    /**
     * Exports all JobRequests matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all JobRequests matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the JobRequests in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the JobRequest.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated rmas for given JobRequest id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Rma instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Rma> findAssociatedRmas(Integer id, Pageable pageable);

}
