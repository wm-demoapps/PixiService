/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.JobRequest;
import com.wavemaker.servicetracker.supportdb.ProductSerial;


/**
 * ServiceImpl object for domain model class ProductSerial.
 *
 * @see ProductSerial
 */
@Service("SupportDB.ProductSerialService")
@Validated
@EntityService(entityClass = ProductSerial.class, serviceId = "SupportDB")
public class ProductSerialServiceImpl implements ProductSerialService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductSerialServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SupportDB.JobRequestService")
    private JobRequestService jobRequestService;

    @Autowired
    @Qualifier("SupportDB.ProductSerialDao")
    private WMGenericDao<ProductSerial, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<ProductSerial, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public ProductSerial create(ProductSerial productSerial) {
        LOGGER.debug("Creating a new ProductSerial with information: {}", productSerial);

        ProductSerial productSerialCreated = this.wmGenericDao.create(productSerial);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(productSerialCreated);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public ProductSerial getById(Integer productserialId) {
        LOGGER.debug("Finding ProductSerial by id: {}", productserialId);
        return this.wmGenericDao.findById(productserialId);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public ProductSerial findById(Integer productserialId) {
        LOGGER.debug("Finding ProductSerial by id: {}", productserialId);
        try {
            return this.wmGenericDao.findById(productserialId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ProductSerial found with id: {}", productserialId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public List<ProductSerial> findByMultipleIds(List<Integer> productserialIds, boolean orderedReturn) {
        LOGGER.debug("Finding ProductSerials by ids: {}", productserialIds);

        return this.wmGenericDao.findByMultipleIds(productserialIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SupportDBTransactionManager")
    @Override
    public ProductSerial update(ProductSerial productSerial) {
        LOGGER.debug("Updating ProductSerial with information: {}", productSerial);

        this.wmGenericDao.update(productSerial);
        this.wmGenericDao.refresh(productSerial);

        return productSerial;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public ProductSerial partialUpdate(Integer productserialId, Map<String, Object>productSerialPatch) {
        LOGGER.debug("Partially Updating the ProductSerial with id: {}", productserialId);

        ProductSerial productSerial = getById(productserialId);

        try {
            ObjectReader productSerialReader = this.objectMapper.reader().forType(ProductSerial.class).withValueToUpdate(productSerial);
            productSerial = productSerialReader.readValue(this.objectMapper.writeValueAsString(productSerialPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", productSerialPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        productSerial = update(productSerial);

        return productSerial;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public ProductSerial delete(Integer productserialId) {
        LOGGER.debug("Deleting ProductSerial with id: {}", productserialId);
        ProductSerial deleted = this.wmGenericDao.findById(productserialId);
        if (deleted == null) {
            LOGGER.debug("No ProductSerial found with id: {}", productserialId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), ProductSerial.class.getSimpleName(), productserialId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public void delete(ProductSerial productSerial) {
        LOGGER.debug("Deleting ProductSerial with {}", productSerial);
        this.wmGenericDao.delete(productSerial);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<ProductSerial> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ProductSerials");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<ProductSerial> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ProductSerials");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SupportDB for table ProductSerial to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SupportDB for table ProductSerial to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<JobRequest> findAssociatedJobRequests(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated jobRequests");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("productSerial.id = '" + id + "'");

        return jobRequestService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service JobRequestService instance
     */
    protected void setJobRequestService(JobRequestService service) {
        this.jobRequestService = service;
    }

}
