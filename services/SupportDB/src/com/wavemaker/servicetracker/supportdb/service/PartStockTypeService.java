/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.Part;
import com.wavemaker.servicetracker.supportdb.PartStockType;

/**
 * Service object for domain model class {@link PartStockType}.
 */
public interface PartStockTypeService {

    /**
     * Creates a new PartStockType. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PartStockType if any.
     *
     * @param partStockType Details of the PartStockType to be created; value cannot be null.
     * @return The newly created PartStockType.
     */
    PartStockType create(@Valid PartStockType partStockType);


	/**
     * Returns PartStockType by given id if exists.
     *
     * @param partstocktypeId The id of the PartStockType to get; value cannot be null.
     * @return PartStockType associated with the given partstocktypeId.
	 * @throws EntityNotFoundException If no PartStockType is found.
     */
    PartStockType getById(Integer partstocktypeId);

    /**
     * Find and return the PartStockType by given id if exists, returns null otherwise.
     *
     * @param partstocktypeId The id of the PartStockType to get; value cannot be null.
     * @return PartStockType associated with the given partstocktypeId.
     */
    PartStockType findById(Integer partstocktypeId);

	/**
     * Find and return the list of PartStockTypes by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param partstocktypeIds The id's of the PartStockType to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return PartStockTypes associated with the given partstocktypeIds.
     */
    List<PartStockType> findByMultipleIds(List<Integer> partstocktypeIds, boolean orderedReturn);


    /**
     * Updates the details of an existing PartStockType. It replaces all fields of the existing PartStockType with the given partStockType.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PartStockType if any.
     *
     * @param partStockType The details of the PartStockType to be updated; value cannot be null.
     * @return The updated PartStockType.
     * @throws EntityNotFoundException if no PartStockType is found with given input.
     */
    PartStockType update(@Valid PartStockType partStockType);


    /**
     * Partially updates the details of an existing PartStockType. It updates only the
     * fields of the existing PartStockType which are passed in the partStockTypePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PartStockType if any.
     *
     * @param partstocktypeId The id of the PartStockType to be deleted; value cannot be null.
     * @param partStockTypePatch The partial data of PartStockType which is supposed to be updated; value cannot be null.
     * @return The updated PartStockType.
     * @throws EntityNotFoundException if no PartStockType is found with given input.
     */
    PartStockType partialUpdate(Integer partstocktypeId, Map<String, Object> partStockTypePatch);

    /**
     * Deletes an existing PartStockType with the given id.
     *
     * @param partstocktypeId The id of the PartStockType to be deleted; value cannot be null.
     * @return The deleted PartStockType.
     * @throws EntityNotFoundException if no PartStockType found with the given id.
     */
    PartStockType delete(Integer partstocktypeId);

    /**
     * Deletes an existing PartStockType with the given object.
     *
     * @param partStockType The instance of the PartStockType to be deleted; value cannot be null.
     */
    void delete(PartStockType partStockType);

    /**
     * Find all PartStockTypes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PartStockTypes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<PartStockType> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all PartStockTypes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PartStockTypes.
     *
     * @see Pageable
     * @see Page
     */
    Page<PartStockType> findAll(String query, Pageable pageable);

    /**
     * Exports all PartStockTypes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all PartStockTypes matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the PartStockTypes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the PartStockType.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated parts for given PartStockType id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Part instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Part> findAssociatedParts(Integer id, Pageable pageable);

}
