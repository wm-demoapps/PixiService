/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.Part;
import com.wavemaker.servicetracker.supportdb.PartMaterial;


/**
 * ServiceImpl object for domain model class PartMaterial.
 *
 * @see PartMaterial
 */
@Service("SupportDB.PartMaterialService")
@Validated
@EntityService(entityClass = PartMaterial.class, serviceId = "SupportDB")
public class PartMaterialServiceImpl implements PartMaterialService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PartMaterialServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SupportDB.PartService")
    private PartService partService;

    @Autowired
    @Qualifier("SupportDB.PartMaterialDao")
    private WMGenericDao<PartMaterial, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<PartMaterial, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public PartMaterial create(PartMaterial partMaterial) {
        LOGGER.debug("Creating a new PartMaterial with information: {}", partMaterial);

        PartMaterial partMaterialCreated = this.wmGenericDao.create(partMaterial);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(partMaterialCreated);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public PartMaterial getById(Integer partmaterialId) {
        LOGGER.debug("Finding PartMaterial by id: {}", partmaterialId);
        return this.wmGenericDao.findById(partmaterialId);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public PartMaterial findById(Integer partmaterialId) {
        LOGGER.debug("Finding PartMaterial by id: {}", partmaterialId);
        try {
            return this.wmGenericDao.findById(partmaterialId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No PartMaterial found with id: {}", partmaterialId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public List<PartMaterial> findByMultipleIds(List<Integer> partmaterialIds, boolean orderedReturn) {
        LOGGER.debug("Finding PartMaterials by ids: {}", partmaterialIds);

        return this.wmGenericDao.findByMultipleIds(partmaterialIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SupportDBTransactionManager")
    @Override
    public PartMaterial update(PartMaterial partMaterial) {
        LOGGER.debug("Updating PartMaterial with information: {}", partMaterial);

        this.wmGenericDao.update(partMaterial);
        this.wmGenericDao.refresh(partMaterial);

        return partMaterial;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public PartMaterial partialUpdate(Integer partmaterialId, Map<String, Object>partMaterialPatch) {
        LOGGER.debug("Partially Updating the PartMaterial with id: {}", partmaterialId);

        PartMaterial partMaterial = getById(partmaterialId);

        try {
            ObjectReader partMaterialReader = this.objectMapper.reader().forType(PartMaterial.class).withValueToUpdate(partMaterial);
            partMaterial = partMaterialReader.readValue(this.objectMapper.writeValueAsString(partMaterialPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", partMaterialPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        partMaterial = update(partMaterial);

        return partMaterial;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public PartMaterial delete(Integer partmaterialId) {
        LOGGER.debug("Deleting PartMaterial with id: {}", partmaterialId);
        PartMaterial deleted = this.wmGenericDao.findById(partmaterialId);
        if (deleted == null) {
            LOGGER.debug("No PartMaterial found with id: {}", partmaterialId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), PartMaterial.class.getSimpleName(), partmaterialId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public void delete(PartMaterial partMaterial) {
        LOGGER.debug("Deleting PartMaterial with {}", partMaterial);
        this.wmGenericDao.delete(partMaterial);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<PartMaterial> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PartMaterials");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<PartMaterial> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PartMaterials");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SupportDB for table PartMaterial to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SupportDB for table PartMaterial to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Part> findAssociatedParts(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated parts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("partMaterial.id = '" + id + "'");

        return partService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service PartService instance
     */
    protected void setPartService(PartService service) {
        this.partService = service;
    }

}
