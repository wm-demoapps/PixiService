/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.CustomerSatisfaction;

/**
 * Service object for domain model class {@link CustomerSatisfaction}.
 */
public interface CustomerSatisfactionService {

    /**
     * Creates a new CustomerSatisfaction. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CustomerSatisfaction if any.
     *
     * @param customerSatisfaction Details of the CustomerSatisfaction to be created; value cannot be null.
     * @return The newly created CustomerSatisfaction.
     */
    CustomerSatisfaction create(@Valid CustomerSatisfaction customerSatisfaction);


	/**
     * Returns CustomerSatisfaction by given id if exists.
     *
     * @param customersatisfactionId The id of the CustomerSatisfaction to get; value cannot be null.
     * @return CustomerSatisfaction associated with the given customersatisfactionId.
	 * @throws EntityNotFoundException If no CustomerSatisfaction is found.
     */
    CustomerSatisfaction getById(Integer customersatisfactionId);

    /**
     * Find and return the CustomerSatisfaction by given id if exists, returns null otherwise.
     *
     * @param customersatisfactionId The id of the CustomerSatisfaction to get; value cannot be null.
     * @return CustomerSatisfaction associated with the given customersatisfactionId.
     */
    CustomerSatisfaction findById(Integer customersatisfactionId);

	/**
     * Find and return the list of CustomerSatisfactions by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param customersatisfactionIds The id's of the CustomerSatisfaction to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return CustomerSatisfactions associated with the given customersatisfactionIds.
     */
    List<CustomerSatisfaction> findByMultipleIds(List<Integer> customersatisfactionIds, boolean orderedReturn);


    /**
     * Updates the details of an existing CustomerSatisfaction. It replaces all fields of the existing CustomerSatisfaction with the given customerSatisfaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CustomerSatisfaction if any.
     *
     * @param customerSatisfaction The details of the CustomerSatisfaction to be updated; value cannot be null.
     * @return The updated CustomerSatisfaction.
     * @throws EntityNotFoundException if no CustomerSatisfaction is found with given input.
     */
    CustomerSatisfaction update(@Valid CustomerSatisfaction customerSatisfaction);


    /**
     * Partially updates the details of an existing CustomerSatisfaction. It updates only the
     * fields of the existing CustomerSatisfaction which are passed in the customerSatisfactionPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CustomerSatisfaction if any.
     *
     * @param customersatisfactionId The id of the CustomerSatisfaction to be deleted; value cannot be null.
     * @param customerSatisfactionPatch The partial data of CustomerSatisfaction which is supposed to be updated; value cannot be null.
     * @return The updated CustomerSatisfaction.
     * @throws EntityNotFoundException if no CustomerSatisfaction is found with given input.
     */
    CustomerSatisfaction partialUpdate(Integer customersatisfactionId, Map<String, Object> customerSatisfactionPatch);

    /**
     * Deletes an existing CustomerSatisfaction with the given id.
     *
     * @param customersatisfactionId The id of the CustomerSatisfaction to be deleted; value cannot be null.
     * @return The deleted CustomerSatisfaction.
     * @throws EntityNotFoundException if no CustomerSatisfaction found with the given id.
     */
    CustomerSatisfaction delete(Integer customersatisfactionId);

    /**
     * Deletes an existing CustomerSatisfaction with the given object.
     *
     * @param customerSatisfaction The instance of the CustomerSatisfaction to be deleted; value cannot be null.
     */
    void delete(CustomerSatisfaction customerSatisfaction);

    /**
     * Find all CustomerSatisfactions matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CustomerSatisfactions.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<CustomerSatisfaction> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all CustomerSatisfactions matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CustomerSatisfactions.
     *
     * @see Pageable
     * @see Page
     */
    Page<CustomerSatisfaction> findAll(String query, Pageable pageable);

    /**
     * Exports all CustomerSatisfactions matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all CustomerSatisfactions matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the CustomerSatisfactions in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the CustomerSatisfaction.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}
