/*Copyright (c) 2022-2023 wavemaker.com All Rights Reserved.This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.servicetracker.supportdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wavemaker.servicetracker.supportdb.Part;
import com.wavemaker.servicetracker.supportdb.PartSale;


/**
 * ServiceImpl object for domain model class Part.
 *
 * @see Part
 */
@Service("SupportDB.PartService")
@Validated
@EntityService(entityClass = Part.class, serviceId = "SupportDB")
public class PartServiceImpl implements PartService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PartServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SupportDB.PartSaleService")
    private PartSaleService partSaleService;

    @Autowired
    @Qualifier("SupportDB.PartDao")
    private WMGenericDao<Part, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Part, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public Part create(Part part) {
        LOGGER.debug("Creating a new Part with information: {}", part);

        Part partCreated = this.wmGenericDao.create(part);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(partCreated);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Part getById(Integer partId) {
        LOGGER.debug("Finding Part by id: {}", partId);
        return this.wmGenericDao.findById(partId);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Part findById(Integer partId) {
        LOGGER.debug("Finding Part by id: {}", partId);
        try {
            return this.wmGenericDao.findById(partId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Part found with id: {}", partId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public List<Part> findByMultipleIds(List<Integer> partIds, boolean orderedReturn) {
        LOGGER.debug("Finding Parts by ids: {}", partIds);

        return this.wmGenericDao.findByMultipleIds(partIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SupportDBTransactionManager")
    @Override
    public Part update(Part part) {
        LOGGER.debug("Updating Part with information: {}", part);

        this.wmGenericDao.update(part);
        this.wmGenericDao.refresh(part);

        return part;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public Part partialUpdate(Integer partId, Map<String, Object>partPatch) {
        LOGGER.debug("Partially Updating the Part with id: {}", partId);

        Part part = getById(partId);

        try {
            ObjectReader partReader = this.objectMapper.reader().forType(Part.class).withValueToUpdate(part);
            part = partReader.readValue(this.objectMapper.writeValueAsString(partPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", partPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        part = update(part);

        return part;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public Part delete(Integer partId) {
        LOGGER.debug("Deleting Part with id: {}", partId);
        Part deleted = this.wmGenericDao.findById(partId);
        if (deleted == null) {
            LOGGER.debug("No Part found with id: {}", partId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Part.class.getSimpleName(), partId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SupportDBTransactionManager")
    @Override
    public void delete(Part part) {
        LOGGER.debug("Deleting Part with {}", part);
        this.wmGenericDao.delete(part);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Part> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Parts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Part> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Parts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SupportDB for table Part to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SupportDB for table Part to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SupportDBTransactionManager")
    @Override
    public Page<PartSale> findAssociatedPartSales(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated partSales");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("part.id = '" + id + "'");

        return partSaleService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service PartSaleService instance
     */
    protected void setPartSaleService(PartSaleService service) {
        this.partSaleService = service;
    }

}
